{"version":3,"sources":["Utils/LocalUserInfo.js","Utils/RetryIfFailed.js","ProjectsStorage/LocalFileStorageProvider/LocalFileResourceMover.js","ResourcesList/LocalResourceExternalEditors.js","Export/LocalExporters/LocalPreviewLauncher/index.js","Utils/TimeFunction.js","Export/LocalExporters/LocalPreviewLauncher/LocalNetworkPreviewDialog.js","Export/LocalExporters/LocalPreviewLauncher/LocalPreviewDebuggerServer.js","Export/LocalExporters/index.js","Export/LocalExporters/LocalCordovaExport.js","Export/LocalExporters/LocalElectronExport.js","Export/LocalExporters/LocalHTML5Export.js","Export/LocalExporters/LocalFacebookInstantGamesExport.js","UI/LocalFilePicker/index.js","Export/LocalExporters/LocalOnlineCordovaExport.js","Export/LocalExporters/LocalOnlineElectronExport.js","Export/LocalExporters/LocalOnlineWebExport.js","MainFrame/ElectronMainMenu.js","JsExtensionsLoader/LocalJsExtensionsLoader.js","JsExtensionsLoader/LocalJsExtensionsFinder.js","EventsFunctionsExtensionsLoader/CodeWriters/LocalEventsFunctionCodeWriter.js","EventsFunctionsExtensionsLoader/Storage/LocalEventsFunctionsExtensionWriter.js","EventsFunctionsExtensionsLoader/Storage/LocalEventsFunctionsExtensionOpener.js","GameEngineFinder/LocalGDJSDevelopmentWatcher.js","ProjectsStorage/ResourceMover/LocalResourceMover.js","Utils/ProcessByChunk.js","Utils/LocalFileUploader.js","ProjectsStorage/ResourceFetcher/LocalResourceFetcher.js","ResourcesList/LocalEmbeddedResourceSources.js","ResourcesList/LocalResourceSources.js","LocalApp.js","Export/LocalExporters/LocalFileSystem.js","Utils/LocalFileDownloader.js","Utils/LocalArchiver.js","Export/LocalExporters/LocalFileUploader.js","Utils/ObjectSplitter.js","ProjectsStorage/LocalFileStorageProvider/LocalProjectOpener.js","ProjectsStorage/LocalFileStorageProvider/LocalProjectWriter.js","UI/CustomSvgIcons/Computer.js","ProjectsStorage/LocalFileStorageProvider/index.js"],"names":["os","optionalRequire","getUID","userInfo","uid","e","retryIfFailed","fn","a","times","tries","latestError","latestReturnValue","electron","ipcRenderer","fs","path","generateUnusedFilepath","basePath","alreadyUsedFilePaths","filename","extension","extname","filenameWithoutExtension","basename","name","newNameGenerator","tentativePath","join","existsSync","has","downloadBlobToLocalFile","blobUrl","filePath","Error","axios","get","responseType","response","arrayBuffer","data","invoke","moveUrlResourcesToLocalFiles","project","fileMetadata","onProgress","resourcesManager","getResourcesManager","allResourceNames","getAllResourceNames","toJSArray","resourceToFetchNames","filter","resourceName","resource","getResource","isURL","getFile","projectPath","dirname","fileIdentifier","baseAssetsPath","downloadedFilePaths","Set","erroredResources","fetchedResourcesCount","PromisePool","withConcurrency","for","process","url","isBlobURL","parseLocalFilePathOrExtensionFromMetadata","localFilePath","downloadedFilePath","resolve","sanitizeFilename","getName","ensureDir","setFile","relative","replace","push","error","isProductAuthorizedResourceUrl","extractFilenameWithExtensionFromProductAuthorizedUrl","isPublicAssetResourceUrl","extractFilenameWithExtensionFromPublicAssetResourceUrl","extractFilenameFromProjectResourceUrl","add","length","openAndWaitForExternalEditorWindow","editorName","externalEditorInput","externalEditorOutput","downloadAndPrepareExternalEditorBase64Resources","resourceNames","getProjectFile","urlsToDownload","filesToRead","forEach","hasResource","console","downloadUrlsToBlobs","urlContainers","count","total","downloadedBlobs","resourcesToDataUrl","Map","Promise","all","map","blob","item","convertBlobToDataURL","dataUrl","set","promises","readFile","content","toString","resourceData","editWithLocalExternalEditor","externalEditorName","defaultName","metadataKey","resourceKind","options","resourceManagementProps","resources","singleFrame","extraOptions","externalEditorData","readMetadata","existingMetadata","fps","isLooping","sendExternalEditorOpened","saveBlobUrlsFromExternalEditorBase64Resources","baseNameForNewResources","modifiedResources","onFetchNewlyAddedResources","freeBlobsAndUpdateMetadata","metadata","patchExternalEditorMetadataWithResourcesNamesIfNecessary","originalIndex","newName","newMetadata","editors","createDisplayName","editDisplayName","kind","edit","gd","global","LocalPreviewLauncher","canDoNetworkPreview","canDoHotReload","state","networkPreviewDialogOpen","networkPreviewHost","networkPreviewPort","networkPreviewError","previewGamePath","previewBrowserWindowOptions","hotReloadsCount","hideMenuBar","alwaysOnTop","_networkPreviewSubscriptionChecker","_hotReloadSubscriptionChecker","_openPreviewBrowserWindow","previewGameIndexHtmlPath","_openPreviewWindow","gamePath","setState","width","getGameResolutionWidth","height","getGameResolutionHeight","useContentSize","title","backgroundColor","webPreferences","webSecurity","nodeIntegration","contextIsolation","getIsMenuBarHiddenInPreview","getIsAlwaysOnTopInPreview","networkPreview","removeAllListeners","on","event","err","serverParams","port","setTimeout","_checkSubscriptionForNetworkPreview","ipAddress","send","root","_prepareExporter","findGDJS","then","gdjsRoot","info","localFileSystem","LocalFileSystem","downloadUrlsToLocalFiles","fileSystem","assignIn","AbstractFileSystemJS","outputDir","getTempDir","exporter","Exporter","launchPreview","previewOptions","layout","externalLayout","getPreviewDebuggerServer","startServer","catch","timeFunction","previewExportOptions","PreviewExportOptions","setIsDevelopmentEnvironment","Window","isDev","setLayoutName","setExternalLayoutName","previewDebuggerServerAddress","getDebuggerServerAddress","useWebsocketDebuggerClientWithServerAddress","address","includeFileHashs","props","getIncludeFileHashs","includeFile","hash","setIncludeFileHash","setElectronRemoteRequirePath","debuggerIds","getExistingDebuggerIds","shouldHotReload","hotReload","setProjectDataOnlyExport","projectDataOnlyExport","setFullLoadingScreen","fullLoadingScreen","fallbackAuthor","setFallbackAuthor","id","username","exportProjectForPixiPreview","delete","debuggerId","sendMessage","command","checkUserHasSubscription","time","localPreviewDebuggerServer","this","ref","subscriptionChecker","onChangeSubscription","mode","open","onClose","onExport","onRunPreviewLocally","React","onResult","t0","performance","now","LocalNetworkDialog","actions","label","primary","onClick","secondaryActions","onRequestClose","value","fullWidth","debuggerServerState","debuggerServerAddress","callbacksList","reject","serverStartPromise","serverStartPromiseCompleted","onErrorReceived","debuggerIdIndex","indexOf","splice","onConnectionClosed","onConnectionOpened","errorMessage","onConnectionErrored","onServerStateChanged","message","parsedMessage","JSON","parse","onHandleParsedMessage","warn","serverStartTimeoutPromise","race","stringify","getServerState","registerCallbacks","callbacks","callbacksIndex","localOnlineWebExporter","onlineWebExporter","exportPipeline","localOnlineWebExportPipeline","localAutomatedExporters","html5Exporter","localHTML5ExportPipeline","onlineCordovaExporter","localOnlineCordovaExportPipeline","onlineElectronExporter","localOnlineElectronExportPipeline","facebookInstantGamesExporter","localFacebookInstantGamesExportPipeline","localManualExporters","cordovaExporter","localCordovaExportPipeline","electronExporter","localElectronExportPipeline","shell","packageNameWarningType","getInitialExportState","getLastCompilationDirectory","canLaunchBuild","exportState","isNavigationDisabled","renderHeader","updateExportState","noMargin","type","defaultPath","onChange","setLastCompilationDirectory","renderLaunchButtonLabel","prepareExporter","context","launchExport","exportOptions","ExportOptions","setTarget","exportWholePixiProject","urlFiles","getAllUrlFilesIn","launchResourcesDownload","updateStepProgress","throwIfAnyError","launchCompression","exportOutput","renderDoneFooter","openExportFolder","openPath","renderGameButton","remote","app","archiveOutputFilename","getPath","filters","extensions","temporaryOutputDir","mkDir","clearDir","archiveLocalFolder","outputFilename","dialog","styles","container","position","display","alignItems","button","marginLeft","textField","flex","LocalFilePicker","onChooseFolder","browserWindow","getCurrentWindow","showSaveDialog","style","undefined","margin","translatableHintText","onlineBuildType","limitedBuilds","targets","keystore","signingDialogOpen","errored","exportStep","includes","archiveOutputDir","tmpdir","launchUpload","outputFile","getBuildFileUploadOptions","uploadOptions","uploadLocalFile","key","launchOnlineBuild","authenticatedUser","uploadBucketKey","gameId","getAuthorizationHeader","firebaseUser","buildCordovaAndroid","buildElectron","renderCustomStepsProgress","build","onSaveProject","sizeLimit","buildWeb","useIPCEventListener","ipcEvent","func","handler","eventArgs","removeListener","ElectronMainMenu","i18n","recentProjectFiles","shortcutMap","language","onChooseProject","onOpenRecentFile","onSaveProjectAs","onCloseProject","onCloseApp","onExportProject","onCreateProject","onCreateBlank","onOpenProjectManager","onOpenHomePage","onOpenDebugger","onOpenAbout","onOpenPreferences","onOpenLanguage","onOpenProfile","onOpenGamesDashboard","setElectronUpdateStatus","buildMainMenuDeclarativeTemplate","isApplicationTopLevelMenu","useCommandWithOptions","generateOptions","text","loadExtension","require","findJsExtensionModules","module","exports","objectsEditorService","objectsRenderingService","filterExamples","onFindGDJS","loadAllExtensions","_","extensionModulePaths","extensionModulePath","extensionModule","rethrowException","ex","result","rawError","registerEditorConfigurations","registerInstanceRenderers","JsPlatform","extensionsRoot","readdir","extensionFolders","filteredExtensionFolders","folder","extensionFolder","extensionFolderPath","jsExtensionModulePath","stat","stats","isFile","modulePaths","modulePath","makeLocalEventsFunctionCodeWriter","onWriteFile","mkdir","code","getPathFor","codeNamespace","slugs","getIncludeFileFor","writeFunctionCode","functionCodeNamespace","writeFile","writeBehaviorCode","behaviorCodeNamespace","writeObjectCode","objectCodeNamespace","writeJSONFile","object","filepath","stringifyException","LocalEventsFunctionsExtensionWriter","chooseEventsFunctionExtensionFile","extensionName","writeEventsFunctionsExtension","serializedObject","serializeToJSObject","chooseCustomObjectFile","objectName","writeCustomObject","customObject","exportedObject","clone","setTags","getVariables","clear","getEffects","getAllBehaviorNames","removeBehavior","LocalEventsFunctionsExtensionOpener","showOpenDialog","properties","filePaths","readEventsFunctionExtensionFile","encoding","dataObject","readJSONFile","LocalGDJSDevelopmentWatcher","shouldWatch","PreferencesContext","values","useGDJSDevelopmentWatcher","moveNothing","moveAllLocalResourcesToCloudResources","oldFileMetadata","newFileMetadata","newCloudProjectId","allResourcesToUpload","resourceFile","checkIfIsGDevelopCloudBucketUrl","Boolean","getResourcesToUpload","alreadyDoneCount","processByChunk","transformItem","resourceAbsolutePath","readLocalFileToFile","file","isChunkTooBig","resourceAndFilesChunk","reduce","size","processChunk","resourceAndFilesToUpload","getCredentialsForCloudProject","uploadProjectResourceFiles","uploadedProjectResourceFiles","index","movers","LocalFileStorageProvider","internalName","ProjectResourcesCopier","copyAllResourcesTo","CloudStorageProvider","UrlStorageProvider","moveAllCloudProjectResourcesToCloudProject","LocalResourceMover","moveAllProjectResources","oldStorageProvider","newStorageProvider","mover","array","currentItemIndex","nextChunk","mappedItem","readLocalFileToArrayBuffer","buffer","slice","byteOffset","byteLength","extensionToMimeType","aac","wav","mp3","ogg","png","jpg","jpeg","webp","ttf","otf","mp4","webm","json","xml","gz","js","extensionWithoutLeadingDot","File","fetchers","moveUrlResourcesToCloudFilesIfPrivate","fetchRelativeResourcesToFullUrls","LocalResourceFetcher","fetchAllProjectResources","storageProvider","fetcher","copyAllEmbeddedResourcesToProjectFolder","filesWithEmbeddedResources","copies","hasAnyEmbeddedResourceOutsideProjectFolder","embeddedResources","embedded","isOutsideProjectFolder","resourceBasename","fullPath","fileExtension","fileNameWithoutExtension","newFileNameWithoutExtension","tentativeFileName","resourceNewPath","copyFile","createAndMapEmbeddedResources","filesWithMappedResources","mapping","relPath","theEmbeddedResource","createNewResource","setName","addResource","listTileMapEmbeddedResources","tileMap","__header__","dir","defs","tilesets","tileset","isPathInProjectFolder","levels","level","bgRelPath","embeddedResourcesParsers","tilemap","ResourceStoreChooser","onChooseResources","ResourceStore","onChoose","chosenResourceUrl","newResource","setOrigin","localResourceSources","allResourceKindsAndMetadata","fileExtensions","displayName","selectLocalFileResources","getLastUsedPath","setLastUsedPath","multiSelection","latestPath","lastUsedPath","hasFilesOutsideProjectFolder","some","parseEmbeddedResources","newToOldFilePaths","showConfirmDialog","copyAllToProjectFolder","filePathWithMapping","mappedResources","setMetadata","embeddedResourcesMapping","displayTab","onlyForStorageProvider","selectResourcesHeadless","renderComponent","justifyContent","RaisedButton","getStorageProvider","FileToCloudProjectResourceUploader","automaticallyOpenInput","automaticallyOpenIfPossible","create","authentication","setUpContextMenu","appArguments","getArguments","disableCheckForUpdates","makeEventsFunctionCodeWriter","eventsFunctionsExtensionWriter","eventsFunctionsExtensionOpener","storageProviders","defaultStorageProvider","getStorageProviderOperations","initialFileMetadataToOpen","renderMainMenu","renderPreviewLauncher","renderExportDialog","automatedExporters","manualExporters","renderGDJSDevelopmentWatcher","resourceMover","resourceFetcher","resourceSources","resourceExternalEditors","localResourceExternalEditors","extensionsLoader","makeExtensionsLoader","ObjectsEditorService","ObjectsRenderingService","pathPosix","posix","_filesToDownload","pathPrefix","normalizedPathPrefix","normalize","Object","keys","mkdirsSync","dirExists","emptyDirSync","fileNameFrom","_downloadUrlsToLocalFiles","dirNameFrom","makeAbsolute","baseDirectory","isAbsolute","makeRelative","charAt","source","dest","copySync","writeToFile","contents","outputFileSync","readFileSync","readDir","ext","toUpperCase","output","VectorString","readdirSync","push_back","fileExists","normalizedFilePath","statSync","firstError","urlContainer","results","lazyRequireArchiver","optionalLazyRequire","archiver","createWriteStream","archive","zlib","fileSize","pointer","log","roundFileSizeInMb","Math","round","pipe","directory","finalize","stepCurrentProgress","stepMaxProgress","unsplit","isReferenceMagicPropertyName","getReferencePartialObject","maxUnsplitDepth","unsplitObject","currentObject","depth","indexOrPropertyName","reference","isReference","referenceTo","partialObject","getSlugifiedUniqueNameFromProperty","propertyName","existingNamesForReference","currentReference","property","onOpenWithPicker","onOpen","referencePath","hasAutoSave","compareLastModified","autoSavePath","autoSavedTime","mtime","getTime","saveTime","onGetAutoSave","checkFileContent","expectedContent","verificationTime","toFixed","writeAndCheckFile","writeAndCheckFormattedJSONFile","writeProjectFiles","paths","serializedProjectObject","isFolderProject","partialObjects","pathSeparator","getArrayItemReferenceName","shouldSplit","createReference","splitObject","currentPath","Array","isArray","itemPath","itemReference","propertyPath","propertyReference","split","Date","getProjectUuid","lastModifiedDate","wasSaved","onChooseSaveProjectAsLocation","saveDialogOptions","showSaveDialogSync","saveAsLocation","onStartSaving","onMoveResources","setProjectFile","onAutoSaveProject","serializeToJSON","getWriteErrorMessage","memo","SvgIcon","viewBox","fill","d","stroke","strokeWidth","strokeLinecap","strokeLinejoin","renderIcon","Computer","fontSize","getFileMetadataFromAppArguments","POSITIONAL_ARGUMENTS_KEY","onRenderNewProjectSaveAsLocationChooser","setSaveAsLocation","newProjectsDefaultFolder","outputPath","LocalFolderPicker","newOutputPath","createOperations","getOpenErrorMessage"],"mappings":"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","file":"static/js/local-app.83e85cdc.chunk.js","sourcesContent":["// @flow\nimport optionalRequire from './OptionalRequire';\nconst os = optionalRequire('os');\n\nexport const getUID = () => {\n  try {\n    return os.userInfo().uid;\n  } catch (e) {\n    return '';\n  }\n};\n","//@flow\ntype Configuration = {| times: number |};\n\nexport const retryIfFailed = async <T>(\n  { times }: Configuration,\n  fn: () => Promise<T>\n): Promise<T> => {\n  let tries = 0;\n  let latestError = null;\n  while (tries < times) {\n    tries++;\n    latestError = null;\n    try {\n      const latestReturnValue = await fn();\n      return latestReturnValue;\n    } catch (error) {\n      latestError = error;\n    }\n  }\n\n  throw latestError;\n};\n","// @flow\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport PromisePool from '@supercharge/promise-pool';\nimport { retryIfFailed } from '../../Utils/RetryIfFailed';\nimport newNameGenerator from '../../Utils/NewNameGenerator';\nimport { type FileMetadata } from '../index';\nimport {\n  extractFilenameWithExtensionFromProductAuthorizedUrl,\n  isProductAuthorizedResourceUrl,\n} from '../../Utils/GDevelopServices/Shop';\nimport {\n  extractFilenameWithExtensionFromPublicAssetResourceUrl,\n  isPublicAssetResourceUrl,\n} from '../../Utils/GDevelopServices/Asset';\nimport {\n  isBlobURL,\n  isURL,\n  parseLocalFilePathOrExtensionFromMetadata,\n} from '../../ResourcesList/ResourceUtils';\nimport { sanitizeFilename } from '../../Utils/Filename';\nimport { extractFilenameFromProjectResourceUrl } from '../../Utils/GDevelopServices/Project';\nimport axios from 'axios';\nconst electron = optionalRequire('electron');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\nconst fs = optionalRequire('fs-extra');\nconst path = optionalRequire('path');\n\ntype Options = {|\n  project: gdProject,\n  fileMetadata: FileMetadata,\n  onProgress: (number, number) => void,\n|};\n\nconst generateUnusedFilepath = (\n  basePath: string,\n  alreadyUsedFilePaths: Set<string>,\n  filename: string\n) => {\n  const extension = path.extname(filename);\n  const filenameWithoutExtension = path.basename(filename, extension);\n  const name = newNameGenerator(filenameWithoutExtension, name => {\n    const tentativePath = path.join(basePath, name) + extension;\n    return (\n      fs.existsSync(tentativePath) || alreadyUsedFilePaths.has(tentativePath)\n    );\n  });\n  return path.join(basePath, name) + extension;\n};\n\nconst downloadBlobToLocalFile = async (\n  blobUrl: string,\n  filePath: string\n): Promise<void> => {\n  if (!ipcRenderer) throw new Error('Not supported');\n\n  const response = await axios.get(blobUrl, {\n    responseType: 'arraybuffer',\n  });\n  const arrayBuffer = response.data;\n\n  await ipcRenderer.invoke(\n    'local-file-save-from-arraybuffer',\n    arrayBuffer,\n    filePath\n  );\n};\n\nexport const moveUrlResourcesToLocalFiles = async ({\n  project,\n  fileMetadata,\n  onProgress,\n}: Options) => {\n  if (!fs || !ipcRenderer) throw new Error('Unsupported');\n\n  // Get all resources to download.\n  const resourcesManager = project.getResourcesManager();\n  const allResourceNames = resourcesManager.getAllResourceNames().toJSArray();\n  const resourceToFetchNames = allResourceNames.filter(resourceName => {\n    const resource = resourcesManager.getResource(resourceName);\n\n    return isURL(resource.getFile());\n  });\n\n  const projectPath = path.dirname(fileMetadata.fileIdentifier);\n  const baseAssetsPath = path.join(projectPath, 'assets');\n  const downloadedFilePaths = new Set<string>();\n  const erroredResources = [];\n\n  let fetchedResourcesCount = 0;\n\n  await PromisePool.withConcurrency(50)\n    .for(resourceToFetchNames)\n    .process(async resourceName => {\n      const resource = resourcesManager.getResource(resourceName);\n\n      const url = resource.getFile();\n      if (isBlobURL(url)) {\n        try {\n          const {\n            localFilePath,\n            extension,\n          } = parseLocalFilePathOrExtensionFromMetadata(resource);\n          const downloadedFilePath = localFilePath\n            ? path.resolve(projectPath, localFilePath)\n            : generateUnusedFilepath(\n                baseAssetsPath,\n                downloadedFilePaths,\n                sanitizeFilename(resource.getName() + (extension || ''))\n              );\n\n          await fs.ensureDir(baseAssetsPath);\n          await downloadBlobToLocalFile(url, downloadedFilePath);\n          resource.setFile(\n            path.relative(projectPath, downloadedFilePath).replace(/\\\\/g, '/')\n          );\n        } catch (error) {\n          erroredResources.push({ resourceName, error });\n        }\n      } else {\n        let filename;\n        if (isProductAuthorizedResourceUrl(url)) {\n          // Resource is a private asset.\n          filename = extractFilenameWithExtensionFromProductAuthorizedUrl(url);\n        } else if (isPublicAssetResourceUrl(url)) {\n          // Resource is a public asset.\n          filename = extractFilenameWithExtensionFromPublicAssetResourceUrl(\n            url\n          );\n        } else {\n          // Resource is a project resource or a generic url.\n          filename = extractFilenameFromProjectResourceUrl(url);\n        }\n\n        // Find a new file for the resource to download.\n        const downloadedFilePath = generateUnusedFilepath(\n          baseAssetsPath,\n          downloadedFilePaths,\n          filename\n        );\n        downloadedFilePaths.add(downloadedFilePath);\n\n        try {\n          await retryIfFailed({ times: 2 }, async () => {\n            await fs.ensureDir(baseAssetsPath);\n            await ipcRenderer.invoke(\n              'local-file-download',\n              url,\n              downloadedFilePath\n            );\n            resource.setFile(\n              path.relative(projectPath, downloadedFilePath).replace(/\\\\/g, '/')\n            );\n          });\n        } catch (error) {\n          erroredResources.push({ resourceName, error });\n        }\n      }\n\n      onProgress(fetchedResourcesCount++, resourceToFetchNames.length);\n    });\n\n  return {\n    erroredResources,\n  };\n};\n","// @flow\nimport {\n  type ResourceExternalEditor,\n  type ExternalEditorInput,\n  type ExternalEditorOutput,\n  type ExternalEditorBase64Resource,\n  type EditWithExternalEditorOptions,\n  readMetadata,\n  saveBlobUrlsFromExternalEditorBase64Resources,\n  freeBlobsAndUpdateMetadata,\n  patchExternalEditorMetadataWithResourcesNamesIfNecessary,\n} from './ResourceExternalEditor';\nimport { sendExternalEditorOpened } from '../Utils/Analytics/EventSender';\nimport { t } from '@lingui/macro';\nimport optionalRequire from '../Utils/OptionalRequire';\nimport { isBlobURL, isURL } from './ResourceUtils';\nimport {\n  convertBlobToDataURL,\n  downloadUrlsToBlobs,\n  type ItemResult,\n} from '../Utils/BlobDownloader';\nimport { type ResourceKind } from './ResourceSource';\n\nconst path = optionalRequire('path');\nconst fs = optionalRequire('fs');\nconst electron = optionalRequire('electron');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\n\n/**\n * Ask Electron main process to open a window for the specified editor,\n * then wait for the editor to be closed and pass the results.\n */\nconst openAndWaitForExternalEditorWindow = async (\n  editorName: 'piskel' | 'yarn' | 'jfxr',\n  externalEditorInput: ExternalEditorInput\n): Promise<?ExternalEditorOutput> => {\n  if (!ipcRenderer) throw new Error('Not supported.');\n\n  const externalEditorOutput = await ipcRenderer.invoke(\n    `${editorName}-load`,\n    externalEditorInput\n  );\n  return externalEditorOutput;\n};\n\n/**\n * Download (or read locally) resources and prepare them to be edited\n * by an external editor.\n */\nexport const downloadAndPrepareExternalEditorBase64Resources = async ({\n  project,\n  resourceNames,\n}: {|\n  project: gdProject,\n  resourceNames: Array<string>,\n|}): Promise<Array<ExternalEditorBase64Resource>> => {\n  type ResourceToDownload = {|\n    resourceName: string,\n    url: string,\n  |};\n\n  type ResourceToReadLocally = {|\n    resourceName: string,\n    localFilePath: string,\n  |};\n\n  const projectPath = path.dirname(project.getProjectFile());\n  const urlsToDownload: Array<ResourceToDownload> = [];\n  const filesToRead: Array<ResourceToReadLocally> = [];\n  const resourcesManager = project.getResourcesManager();\n  resourceNames.forEach(resourceName => {\n    if (!resourcesManager.hasResource(resourceName)) return;\n\n    const resource = resourcesManager.getResource(resourceName);\n    const url = resource.getFile();\n    if (isURL(url)) {\n      if (isBlobURL(url)) {\n        console.error('Unsupported blob URL for a resource - ignoring it.');\n      } else {\n        urlsToDownload.push({\n          url,\n          resourceName,\n        });\n      }\n    } else {\n      // This resource is a local file.\n      filesToRead.push({\n        localFilePath: url,\n        resourceName,\n      });\n    }\n  });\n\n  const downloadedBlobs: Array<\n    ItemResult<ResourceToDownload>\n  > = await downloadUrlsToBlobs({\n    urlContainers: urlsToDownload,\n    onProgress: (count, total) => {},\n  });\n\n  const resourcesToDataUrl = new Map<\n    string,\n    {|\n      dataUrl: string,\n      localFilePath?: string,\n    |}\n  >();\n  await Promise.all(\n    downloadedBlobs.map(async ({ error, blob, item }) => {\n      if (blob) {\n        try {\n          resourcesToDataUrl.set(item.resourceName, {\n            dataUrl: await convertBlobToDataURL(blob),\n          });\n        } catch (error) {\n          console.error(\n            `Unable to read data from resource \"${\n              item.resourceName\n            }\" - ignoring it.`,\n            error\n          );\n        }\n      }\n    })\n  );\n  await Promise.all(\n    filesToRead.map(async ({ localFilePath, resourceName }) => {\n      try {\n        const content = await fs.promises.readFile(\n          path.resolve(projectPath, localFilePath)\n        );\n\n        resourcesToDataUrl.set(resourceName, {\n          localFilePath,\n          dataUrl: 'data:text/plain;base64,' + content.toString('base64'),\n        });\n      } catch (error) {\n        console.error(\n          `Unable to read local file \"${localFilePath}\" - ignoring it.`,\n          error\n        );\n      }\n    })\n  );\n\n  return resourceNames.map(resourceName => {\n    const resourceData = resourcesToDataUrl.get(resourceName);\n    if (!resourceData)\n      return {\n        name: resourceName,\n        dataUrl: '',\n      };\n\n    const { localFilePath, dataUrl } = resourceData;\n    return {\n      name: resourceName,\n      dataUrl,\n      localFilePath,\n    };\n  });\n};\n\n/**\n * Edit one or more resources with the specified external editor.\n */\nconst editWithLocalExternalEditor = async ({\n  externalEditorName,\n  defaultName,\n  metadataKey,\n  resourceKind,\n  options,\n}: {|\n  externalEditorName: 'piskel' | 'yarn' | 'jfxr',\n  defaultName: string,\n  metadataKey: string,\n  resourceKind: ResourceKind,\n  options: EditWithExternalEditorOptions,\n|}) => {\n  const { project, resourceNames, resourceManagementProps } = options;\n\n  // Fetch all edited resources as base64 encoded \"data urls\" (`data:...`).\n  const resources = await downloadAndPrepareExternalEditorBase64Resources({\n    project,\n    resourceNames,\n  });\n\n  // Open the external editor, passing the resources with the data urls.\n  const externalEditorInput: ExternalEditorInput = {\n    singleFrame: options.extraOptions.singleFrame,\n    externalEditorData: readMetadata(\n      metadataKey,\n      options.extraOptions.existingMetadata\n    ),\n    fps: options.extraOptions.fps,\n    isLooping: options.extraOptions.isLooping,\n    name: options.extraOptions.name || resourceNames[0] || defaultName,\n    resources,\n  };\n  sendExternalEditorOpened(externalEditorName);\n  const externalEditorOutput: ?ExternalEditorOutput = await openAndWaitForExternalEditorWindow(\n    externalEditorName,\n    externalEditorInput\n  );\n  if (!externalEditorOutput) return null; // Changes cancelled.\n\n  // Save the edited files back to the GDevelop resources, as \"blob urls\" (blob:...)\n  // which can then uploaded or saved locally.\n  const modifiedResources = await saveBlobUrlsFromExternalEditorBase64Resources(\n    {\n      baseNameForNewResources: externalEditorOutput.baseNameForNewResources,\n      project,\n      resources: externalEditorOutput.resources,\n      resourceKind,\n    }\n  );\n\n  // Ask the project to persist the resources (\"blob urls\" will be either uploaded\n  // or saved locally).\n  try {\n    await resourceManagementProps.onFetchNewlyAddedResources();\n  } catch (error) {\n    console.error(\n      'An error happened while fetching the newly added resources:',\n      error\n    );\n  }\n\n  // Free the \"blob urls\" so that blobs don't stay in memory! They are only temporarily\n  // useful while waiting for an upload/local file save.\n  freeBlobsAndUpdateMetadata({\n    modifiedResources,\n    metadataKey,\n    metadata: options.extraOptions.singleFrame\n      ? externalEditorOutput.externalEditorData\n      : null,\n  });\n\n  // Some editors (Piskel) need to have resource names persisted.\n  patchExternalEditorMetadataWithResourcesNamesIfNecessary(\n    modifiedResources.map(({ resource }) => resource.getName()),\n    externalEditorOutput.externalEditorData\n  );\n\n  return {\n    resources: modifiedResources.map(({ resource, originalIndex }) => ({\n      name: resource.getName(),\n      originalIndex,\n    })),\n    newName: externalEditorOutput.baseNameForNewResources,\n    newMetadata: { [metadataKey]: externalEditorOutput.externalEditorData },\n  };\n};\n\n/**\n * This is the list of editors that can be used to edit resources\n * on Electron runtime.\n */\nconst editors: Array<ResourceExternalEditor> = [\n  {\n    name: 'piskel-app',\n    createDisplayName: t`Create with Piskel`,\n    editDisplayName: t`Edit with Piskel`,\n    kind: 'image',\n    edit: async options => {\n      return await editWithLocalExternalEditor({\n        options,\n        externalEditorName: 'piskel',\n        defaultName: 'New image',\n        metadataKey: 'pskl',\n        resourceKind: 'image',\n      });\n    },\n  },\n  {\n    name: 'Jfxr',\n    createDisplayName: t`Create with Jfxr`,\n    editDisplayName: t`Edit with Jfxr`,\n    kind: 'audio',\n    edit: async options => {\n      return await editWithLocalExternalEditor({\n        options,\n        externalEditorName: 'jfxr',\n        defaultName: 'New sound effect',\n        metadataKey: 'jfxr',\n        resourceKind: 'audio',\n      });\n    },\n  },\n  {\n    name: 'Yarn',\n    createDisplayName: t`Create with Yarn`,\n    editDisplayName: t`Edit with Yarn`,\n    kind: 'json',\n    edit: async options => {\n      return await editWithLocalExternalEditor({\n        options,\n        externalEditorName: 'yarn',\n        defaultName: 'New dialogue tree',\n        metadataKey: 'yarn',\n        resourceKind: 'json',\n      });\n    },\n  },\n];\n\nexport default editors;\n","// @flow\nimport { Trans } from '@lingui/macro';\n\nimport * as React from 'react';\nimport LocalFileSystem from '../LocalFileSystem';\nimport optionalRequire from '../../../Utils/OptionalRequire';\nimport { timeFunction } from '../../../Utils/TimeFunction';\nimport { findGDJS } from '../../../GameEngineFinder/LocalGDJSFinder';\nimport LocalNetworkPreviewDialog from './LocalNetworkPreviewDialog';\nimport assignIn from 'lodash/assignIn';\nimport { type PreviewOptions } from '../../PreviewLauncher.flow';\nimport SubscriptionChecker, {\n  type SubscriptionCheckerInterface,\n} from '../../../Profile/Subscription/SubscriptionChecker';\nimport {\n  getDebuggerServerAddress,\n  localPreviewDebuggerServer,\n} from './LocalPreviewDebuggerServer';\nimport Window from '../../../Utils/Window';\nconst electron = optionalRequire('electron');\nconst path = optionalRequire('path');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\nconst gd: libGDevelop = global.gd;\n\ntype Props = {|\n  getIncludeFileHashs: () => { [string]: number },\n  onExport?: () => void,\n|};\n\ntype State = {|\n  networkPreviewDialogOpen: boolean,\n  networkPreviewHost: ?string,\n  networkPreviewPort: ?number,\n  networkPreviewError: ?any,\n  hotReloadsCount: number,\n  previewGamePath: ?string,\n  previewBrowserWindowOptions: ?{\n    width: number,\n    height: number,\n    useContentSize: boolean,\n    title: string,\n    backgroundColor: string,\n  },\n  hideMenuBar: boolean,\n  alwaysOnTop: boolean,\n|};\n\nexport default class LocalPreviewLauncher extends React.Component<\n  Props,\n  State\n> {\n  canDoNetworkPreview = () => true;\n  canDoHotReload = () => true;\n\n  state = {\n    networkPreviewDialogOpen: false,\n    networkPreviewHost: null,\n    networkPreviewPort: null,\n    networkPreviewError: null,\n    previewGamePath: null,\n    previewBrowserWindowOptions: null,\n    hotReloadsCount: 0,\n    hideMenuBar: true,\n    alwaysOnTop: true,\n  };\n  _networkPreviewSubscriptionChecker: ?SubscriptionCheckerInterface = null;\n  _hotReloadSubscriptionChecker: ?SubscriptionCheckerInterface = null;\n\n  _openPreviewBrowserWindow = () => {\n    const { previewGamePath, previewBrowserWindowOptions } = this.state;\n    if (!previewBrowserWindowOptions || !previewGamePath) return;\n\n    if (!ipcRenderer) return;\n\n    ipcRenderer.invoke('preview-open', {\n      previewBrowserWindowOptions,\n      previewGameIndexHtmlPath: `file://${previewGamePath}/index.html`,\n      alwaysOnTop: this.state.alwaysOnTop,\n      hideMenuBar: this.state.hideMenuBar,\n    });\n  };\n\n  _openPreviewWindow = (\n    project: gdProject,\n    gamePath: string,\n    options: PreviewOptions\n  ): void => {\n    this.setState(\n      {\n        previewBrowserWindowOptions: {\n          width: project.getGameResolutionWidth(),\n          height: project.getGameResolutionHeight(),\n          useContentSize: true,\n          title: `Preview of ${project.getName()}`,\n          backgroundColor: '#000000',\n          webPreferences: {\n            webSecurity: false, // Allow to access to local files,\n            // Allow Node.js API access in renderer process, as long\n            // as we've not removed dependency on it and on \"@electron/remote\".\n            nodeIntegration: true,\n            contextIsolation: false,\n          },\n        },\n        previewGamePath: gamePath,\n        hideMenuBar: !options.getIsMenuBarHiddenInPreview(),\n        alwaysOnTop: options.getIsAlwaysOnTopInPreview(),\n      },\n      () => {\n        if (!options.networkPreview) {\n          this._openPreviewBrowserWindow();\n        } else {\n          if (!ipcRenderer) return;\n\n          ipcRenderer.removeAllListeners('serve-folder-done');\n          ipcRenderer.removeAllListeners('local-network-ips');\n          ipcRenderer.on('serve-folder-done', (event, err, serverParams) => {\n            if (err) {\n              this.setState({\n                networkPreviewDialogOpen: true,\n                networkPreviewPort: null,\n                networkPreviewHost: null,\n                networkPreviewError: err,\n              });\n            } else {\n              this.setState({\n                networkPreviewDialogOpen: true,\n                networkPreviewPort: serverParams.port,\n              });\n            }\n\n            setTimeout(() => this._checkSubscriptionForNetworkPreview());\n          });\n          ipcRenderer.on('local-network-ip', (event, ipAddress) => {\n            this.setState({\n              networkPreviewHost: ipAddress,\n            });\n          });\n          ipcRenderer.send('serve-folder', {\n            root: gamePath,\n          });\n          ipcRenderer.send('get-local-network-ip');\n        }\n      }\n    );\n  };\n\n  _prepareExporter = (): Promise<{|\n    outputDir: string,\n    exporter: gdjsExporter,\n    gdjsRoot: string,\n  |}> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      const localFileSystem = new LocalFileSystem({\n        downloadUrlsToLocalFiles: false,\n      });\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const outputDir = path.join(fileSystem.getTempDir(), 'preview');\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n\n      return {\n        outputDir,\n        exporter,\n        gdjsRoot,\n      };\n    });\n  };\n\n  launchPreview = (previewOptions: PreviewOptions): Promise<any> => {\n    const { project, layout, externalLayout } = previewOptions;\n\n    // Start the debugger server for previews. Even if not used,\n    // useful if the user opens the Debugger editor later, or want to\n    // hot reload.\n    return this.getPreviewDebuggerServer()\n      .startServer()\n      .catch(err => {\n        // Ignore any error when running the debugger server - the preview\n        // can still work without it.\n        console.error(\n          'Unable to start the Debugger Server for the preview:',\n          err\n        );\n      })\n      .then(() => this._prepareExporter())\n      .then(({ outputDir, exporter, gdjsRoot }) => {\n        timeFunction(\n          () => {\n            const previewExportOptions = new gd.PreviewExportOptions(\n              project,\n              outputDir\n            );\n            previewExportOptions.setIsDevelopmentEnvironment(Window.isDev());\n            previewExportOptions.setLayoutName(layout.getName());\n            if (externalLayout) {\n              previewExportOptions.setExternalLayoutName(\n                externalLayout.getName()\n              );\n            }\n\n            const previewDebuggerServerAddress = getDebuggerServerAddress();\n            if (previewDebuggerServerAddress) {\n              previewExportOptions.useWebsocketDebuggerClientWithServerAddress(\n                previewDebuggerServerAddress.address,\n                '' + previewDebuggerServerAddress.port\n              );\n            }\n\n            const includeFileHashs = this.props.getIncludeFileHashs();\n            for (const includeFile in includeFileHashs) {\n              const hash = includeFileHashs[includeFile];\n              previewExportOptions.setIncludeFileHash(includeFile, hash);\n            }\n\n            // Give the preview the path to the \"@electron/remote\" module of the editor,\n            // as this is required by some features and we've not removed dependency\n            // on \"@electron/remote\" yet.\n            previewExportOptions.setElectronRemoteRequirePath(\n              path.join(\n                gdjsRoot,\n                '../preview_node_modules',\n                '@electron/remote',\n                'renderer/index.js'\n              )\n            );\n\n            const debuggerIds = this.getPreviewDebuggerServer().getExistingDebuggerIds();\n            const shouldHotReload =\n              previewOptions.hotReload && !!debuggerIds.length;\n\n            previewExportOptions.setProjectDataOnlyExport(\n              // Only export project data if asked and if a hot-reloading is being done.\n              shouldHotReload && previewOptions.projectDataOnlyExport\n            );\n\n            previewExportOptions.setFullLoadingScreen(\n              previewOptions.fullLoadingScreen\n            );\n\n            if (previewOptions.fallbackAuthor) {\n              previewExportOptions.setFallbackAuthor(\n                previewOptions.fallbackAuthor.id,\n                previewOptions.fallbackAuthor.username\n              );\n            }\n\n            exporter.exportProjectForPixiPreview(previewExportOptions);\n            previewExportOptions.delete();\n            exporter.delete();\n\n            if (shouldHotReload) {\n              debuggerIds.forEach(debuggerId => {\n                this.getPreviewDebuggerServer().sendMessage(debuggerId, {\n                  command: 'hotReload',\n                });\n              });\n\n              if (\n                this.state.hotReloadsCount % 16 === 0 &&\n                this._hotReloadSubscriptionChecker\n              ) {\n                this._hotReloadSubscriptionChecker.checkUserHasSubscription();\n              }\n              this.setState(state => ({\n                hotReloadsCount: state.hotReloadsCount + 1,\n              }));\n            } else {\n              this._openPreviewWindow(project, outputDir, previewOptions);\n            }\n          },\n          time => console.info(`Preview took ${time}ms`)\n        );\n      });\n  };\n\n  getPreviewDebuggerServer() {\n    return localPreviewDebuggerServer;\n  }\n\n  _checkSubscriptionForNetworkPreview = () => {\n    if (!this._networkPreviewSubscriptionChecker) return true;\n\n    return this._networkPreviewSubscriptionChecker.checkUserHasSubscription();\n  };\n\n  render() {\n    const {\n      networkPreviewDialogOpen,\n      networkPreviewHost,\n      networkPreviewPort,\n      networkPreviewError,\n    } = this.state;\n\n    return (\n      <React.Fragment>\n        <SubscriptionChecker\n          ref={subscriptionChecker =>\n            (this._networkPreviewSubscriptionChecker = subscriptionChecker)\n          }\n          onChangeSubscription={() =>\n            this.setState({ networkPreviewDialogOpen: false })\n          }\n          id=\"Preview over wifi\"\n          title={<Trans>Preview over wifi</Trans>}\n          mode=\"try\"\n        />\n        <SubscriptionChecker\n          ref={subscriptionChecker =>\n            (this._hotReloadSubscriptionChecker = subscriptionChecker)\n          }\n          id=\"Hot reloading\"\n          title={\n            <Trans>Live preview (apply changes to the running preview)</Trans>\n          }\n          mode=\"try\"\n        />\n        <LocalNetworkPreviewDialog\n          open={networkPreviewDialogOpen}\n          url={\n            networkPreviewHost && networkPreviewPort\n              ? `${networkPreviewHost}:${networkPreviewPort}`\n              : null\n          }\n          error={networkPreviewError}\n          onClose={() => this.setState({ networkPreviewDialogOpen: false })}\n          onExport={this.props.onExport}\n          onRunPreviewLocally={this._openPreviewBrowserWindow}\n        />\n      </React.Fragment>\n    );\n  }\n}\n","// @flow\n\nexport const timeFunction = (fn: Function, onResult: number => void) => {\n  var t0 = performance.now();\n  fn();\n  var t1 = performance.now();\n  onResult(t1 - t0);\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\n\nimport * as React from 'react';\nimport Dialog from '../../../UI/Dialog';\nimport FlatButton from '../../../UI/FlatButton';\nimport TextField from '../../../UI/TextField';\nimport Text from '../../../UI/Text';\nimport { Line } from '../../../UI/Grid';\nimport PlaceholderLoader from '../../../UI/PlaceholderLoader';\n\ntype Props = {|\n  open: boolean,\n  url: ?string,\n  onClose: () => void,\n  onExport: ?() => void,\n  onRunPreviewLocally: () => void,\n  error: ?any,\n|};\n\nexport default class LocalNetworkDialog extends React.Component<Props, {}> {\n  render() {\n    const {\n      url,\n      open,\n      error,\n      onExport,\n      onClose,\n      onRunPreviewLocally,\n    } = this.props;\n    if (!open) return null;\n\n    return (\n      <Dialog\n        title={<Trans>Preview</Trans>}\n        actions={[\n          <FlatButton\n            key=\"close\"\n            label={<Trans>Close</Trans>}\n            primary\n            onClick={onClose}\n          />,\n        ]}\n        secondaryActions={[\n          onExport && (\n            <FlatButton\n              key=\"export\"\n              label={<Trans>Export game</Trans>}\n              onClick={onExport}\n            />\n          ),\n          <FlatButton\n            key=\"run-preview-locally\"\n            label={<Trans>Run on this computer</Trans>}\n            onClick={onRunPreviewLocally}\n          />,\n        ]}\n        open={open}\n        onRequestClose={onClose}\n      >\n        {error && (\n          <Line>\n            <Text>\n              <Trans>\n                Unable to start the server for the preview! Make sure that you\n                are authorized to run servers on this computer. Otherwise, use\n                classic preview to test your game.\n              </Trans>\n            </Text>\n          </Line>\n        )}\n        {!error && !url && <PlaceholderLoader />}\n        {!error && url && (\n          <div>\n            <Line>\n              <Text>\n                <Trans>\n                  Your preview is ready! On your mobile or tablet, open your\n                  browser and enter in the address bar:\n                </Trans>\n              </Text>\n            </Line>\n            <TextField value={url} fullWidth />\n            <Line>\n              <Text>\n                <Trans>\n                  Please note that your device should be connected on the same\n                  network as this computer.\n                </Trans>\n              </Text>\n            </Line>\n          </div>\n        )}\n      </Dialog>\n    );\n  }\n}\n","// @flow\nimport optionalRequire from '../../../Utils/OptionalRequire';\nimport {\n  type PreviewDebuggerServerCallbacks,\n  type PreviewDebuggerServer,\n  type DebuggerId,\n  type ServerAddress,\n} from '../../PreviewLauncher.flow';\nconst electron = optionalRequire('electron');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\n\nlet debuggerServerState: 'started' | 'stopped' = 'stopped';\nlet debuggerServerAddress: ?ServerAddress = null;\nconst callbacksList: Array<PreviewDebuggerServerCallbacks> = [];\nconst debuggerIds: Array<DebuggerId> = [];\n\nconst removeServerListeners = () => {\n  if (!ipcRenderer) return;\n\n  ipcRenderer.removeAllListeners('debugger-send-message-done');\n  ipcRenderer.removeAllListeners('debugger-error-received');\n  ipcRenderer.removeAllListeners('debugger-connection-closed');\n  ipcRenderer.removeAllListeners('debugger-connection-opened');\n  ipcRenderer.removeAllListeners('debugger-connection-errored');\n  ipcRenderer.removeAllListeners('debugger-start-server-done');\n  ipcRenderer.removeAllListeners('debugger-message-received');\n};\n\n/**\n * A debugger server implemented using Electron (this one is just a bridge to it,\n * communicating through events with it).\n */\nexport const localPreviewDebuggerServer: PreviewDebuggerServer = {\n  startServer: () => {\n    if (!ipcRenderer) return Promise.reject();\n    if (debuggerServerState === 'started') return Promise.resolve();\n\n    const serverStartPromise = new Promise((resolve, reject) => {\n      let serverStartPromiseCompleted = false;\n      debuggerServerState = 'stopped';\n      debuggerServerAddress = null;\n      removeServerListeners();\n\n      ipcRenderer.on('debugger-error-received', (event, err) => {\n        if (!serverStartPromiseCompleted) {\n          reject(err);\n          serverStartPromiseCompleted = true;\n        }\n\n        callbacksList.forEach(({ onErrorReceived }) => onErrorReceived(err));\n      });\n\n      ipcRenderer.on('debugger-connection-closed', (event, { id }) => {\n        const debuggerIdIndex = debuggerIds.indexOf(id);\n        if (debuggerIdIndex !== -1) debuggerIds.splice(debuggerIdIndex, 1);\n\n        callbacksList.forEach(({ onConnectionClosed }) =>\n          onConnectionClosed({\n            id,\n            debuggerIds,\n          })\n        );\n      });\n\n      ipcRenderer.on('debugger-connection-opened', (event, { id }) => {\n        debuggerIds.push(id);\n        callbacksList.forEach(({ onConnectionOpened }) =>\n          onConnectionOpened({\n            id,\n            debuggerIds,\n          })\n        );\n      });\n\n      ipcRenderer.on(\n        'debugger-connection-errored',\n        (event, { id, errorMessage }) => {\n          callbacksList.forEach(({ onConnectionErrored }) =>\n            onConnectionErrored({\n              id,\n              errorMessage,\n            })\n          );\n        }\n      );\n\n      ipcRenderer.on('debugger-start-server-done', (event, { address }) => {\n        console.info('Local preview debugger started');\n        debuggerServerState = 'started';\n        debuggerServerAddress = address;\n        if (!serverStartPromiseCompleted) {\n          resolve();\n          serverStartPromiseCompleted = true;\n        }\n\n        callbacksList.forEach(({ onServerStateChanged }) =>\n          onServerStateChanged()\n        );\n      });\n\n      ipcRenderer.on('debugger-message-received', (event, { id, message }) => {\n        console.info('Processing message received for debugger');\n        try {\n          const parsedMessage = JSON.parse(message);\n          callbacksList.forEach(({ onHandleParsedMessage }) =>\n            onHandleParsedMessage({ id, parsedMessage })\n          );\n        } catch (e) {\n          console.warn(\n            'Error while parsing message received from debugger client:',\n            e\n          );\n        }\n      });\n      ipcRenderer.send('debugger-start-server');\n    });\n\n    // Consider the start of the server as a failure if not completed/errored\n    // after 5s.\n    const serverStartTimeoutPromise = new Promise((resolve, reject) => {\n      setTimeout(() => {\n        reject(\n          new Error(\n            'Debugger server not started or errored after 5s - aborting.'\n          )\n        );\n      }, 5000);\n    });\n    return Promise.race([serverStartPromise, serverStartTimeoutPromise]);\n  },\n  sendMessage: (id: DebuggerId, message: Object) => {\n    if (!ipcRenderer) return;\n    if (debuggerServerState === 'stopped') {\n      console.error('Cannot send message when debugger server is stopped.');\n      return;\n    }\n\n    ipcRenderer.send('debugger-send-message', {\n      id,\n      message: JSON.stringify(message),\n    });\n  },\n  getServerState: () => debuggerServerState,\n  getExistingDebuggerIds: () => debuggerIds,\n  registerCallbacks: (callbacks: PreviewDebuggerServerCallbacks) => {\n    callbacksList.push(callbacks);\n\n    return () => {\n      const callbacksIndex = callbacksList.indexOf(callbacks);\n      if (callbacksIndex !== -1) callbacksList.splice(callbacksIndex, 1);\n    };\n  },\n};\n\nexport const getDebuggerServerAddress = (): ?ServerAddress =>\n  debuggerServerAddress;\n","// @flow\nimport { type Exporter } from '../ExportDialog';\nimport { localCordovaExportPipeline } from './LocalCordovaExport';\nimport { localElectronExportPipeline } from './LocalElectronExport';\nimport { localHTML5ExportPipeline } from './LocalHTML5Export';\nimport { localFacebookInstantGamesExportPipeline } from './LocalFacebookInstantGamesExport';\nimport { localOnlineCordovaExportPipeline } from './LocalOnlineCordovaExport';\nimport { localOnlineElectronExportPipeline } from './LocalOnlineElectronExport';\nimport { localOnlineWebExportPipeline } from './LocalOnlineWebExport';\nimport { cordovaExporter } from '../GenericExporters/CordovaExport';\nimport { onlineWebExporter } from '../GenericExporters/OnlineWebExport';\nimport { html5Exporter } from '../GenericExporters/HTML5Export';\nimport { facebookInstantGamesExporter } from '../GenericExporters/FacebookInstantGamesExport';\nimport { onlineCordovaExporter } from '../GenericExporters/OnlineCordovaExport';\nimport { onlineElectronExporter } from '../GenericExporters/OnlineElectronExport';\nimport { electronExporter } from '../GenericExporters/ElectronExport';\n\nexport const localOnlineWebExporter: Exporter = {\n  ...onlineWebExporter,\n  exportPipeline: localOnlineWebExportPipeline,\n};\n\nexport const localAutomatedExporters: Array<Exporter> = [\n  {\n    ...html5Exporter,\n    exportPipeline: localHTML5ExportPipeline,\n  },\n  {\n    ...onlineCordovaExporter,\n    exportPipeline: localOnlineCordovaExportPipeline,\n  },\n  {\n    ...onlineElectronExporter,\n    exportPipeline: localOnlineElectronExportPipeline,\n  },\n  {\n    ...facebookInstantGamesExporter,\n    exportPipeline: localFacebookInstantGamesExportPipeline,\n  },\n];\n\nexport const localManualExporters: Array<Exporter> = [\n  {\n    ...html5Exporter,\n    exportPipeline: localHTML5ExportPipeline,\n  },\n  {\n    ...cordovaExporter,\n    exportPipeline: localCordovaExportPipeline,\n  },\n  {\n    ...electronExporter,\n    exportPipeline: localElectronExportPipeline,\n  },\n];\n","// @flow\nimport { Trans } from '@lingui/macro';\n\nimport React from 'react';\nimport RaisedButton from '../../UI/RaisedButton';\nimport { Column, Line } from '../../UI/Grid';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport LocalFileSystem, { type UrlFileDescriptor } from './LocalFileSystem';\nimport LocalFolderPicker from '../../UI/LocalFolderPicker';\nimport assignIn from 'lodash/assignIn';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport {\n  ExplanationHeader,\n  DoneFooter,\n} from '../GenericExporters/CordovaExport';\nimport { downloadUrlsToLocalFiles } from '../../Utils/LocalFileDownloader';\nconst electron = optionalRequire('electron');\nconst shell = electron ? electron.shell : null;\n\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = {\n  outputDir: string,\n};\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  localFileSystem: LocalFileSystem,\n|};\n\ntype ExportOutput = {|\n  urlFiles: Array<UrlFileDescriptor>,\n|};\n\ntype ResourcesDownloadOutput = null;\n\ntype CompressionOutput = null;\n\nexport const localCordovaExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'local-cordova',\n  packageNameWarningType: 'mobile',\n\n  getInitialExportState: (project: gdProject) => ({\n    outputDir: project.getLastCompilationDirectory(),\n  }),\n\n  canLaunchBuild: exportState => !!exportState.outputDir,\n\n  isNavigationDisabled: () => false,\n\n  renderHeader: ({ project, exportState, updateExportState }) => (\n    <Column noMargin>\n      <Line>\n        <Column noMargin>\n          <ExplanationHeader />\n        </Column>\n      </Line>\n      <Line>\n        <LocalFolderPicker\n          type=\"export\"\n          value={exportState.outputDir}\n          defaultPath={project.getLastCompilationDirectory()}\n          onChange={outputDir => {\n            updateExportState(() => ({ outputDir }));\n            project.setLastCompilationDirectory(outputDir);\n          }}\n          fullWidth\n        />\n      </Line>\n    </Column>\n  ),\n\n  renderLaunchButtonLabel: () => <Trans>Package</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      // TODO: Memory leak? Check for other exporters too.\n      const localFileSystem = new LocalFileSystem({\n        downloadUrlsToLocalFiles: true,\n      });\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n\n      return {\n        exporter,\n        localFileSystem,\n      };\n    });\n  },\n\n  launchExport: async (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, localFileSystem }: PreparedExporter,\n    fallbackAuthor: ?{ id: string, username: string }\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.ExportOptions(\n      context.project,\n      context.exportState.outputDir\n    );\n    exportOptions.setTarget('cordova');\n    if (fallbackAuthor) {\n      exportOptions.setFallbackAuthor(\n        fallbackAuthor.id,\n        fallbackAuthor.username\n      );\n    }\n    exporter.exportWholePixiProject(exportOptions);\n    exportOptions.delete();\n    exporter.delete();\n\n    return {\n      urlFiles: localFileSystem.getAllUrlFilesIn(context.exportState.outputDir),\n    };\n  },\n\n  launchResourcesDownload: async (\n    context: ExportPipelineContext<ExportState>,\n    { urlFiles }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    await downloadUrlsToLocalFiles({\n      urlContainers: urlFiles,\n      onProgress: context.updateStepProgress,\n      throwIfAnyError: true,\n    });\n\n    return null;\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    exportOutput: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    return Promise.resolve(null);\n  },\n\n  renderDoneFooter: ({ exportState, onClose }) => {\n    const openExportFolder = () => {\n      if (shell) shell.openPath(exportState.outputDir);\n    };\n\n    return (\n      <DoneFooter\n        renderGameButton={() => (\n          <RaisedButton\n            key=\"open\"\n            label={<Trans>Open folder</Trans>}\n            primary={true}\n            onClick={openExportFolder}\n          />\n        )}\n      />\n    );\n  },\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\n\nimport React from 'react';\nimport RaisedButton from '../../UI/RaisedButton';\nimport { Column, Line } from '../../UI/Grid';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport LocalFileSystem, { type UrlFileDescriptor } from './LocalFileSystem';\nimport LocalFolderPicker from '../../UI/LocalFolderPicker';\nimport assignIn from 'lodash/assignIn';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport {\n  ExplanationHeader,\n  DoneFooter,\n} from '../GenericExporters/ElectronExport';\nimport { downloadUrlsToLocalFiles } from '../../Utils/LocalFileDownloader';\nconst electron = optionalRequire('electron');\nconst shell = electron ? electron.shell : null;\n\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = {\n  outputDir: string,\n};\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  localFileSystem: LocalFileSystem,\n|};\n\ntype ExportOutput = {|\n  urlFiles: Array<UrlFileDescriptor>,\n|};\n\ntype ResourcesDownloadOutput = null;\n\ntype CompressionOutput = null;\n\nexport const localElectronExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'local-electron',\n  packageNameWarningType: 'desktop',\n\n  getInitialExportState: (project: gdProject) => ({\n    outputDir: project.getLastCompilationDirectory(),\n  }),\n\n  canLaunchBuild: exportState => !!exportState.outputDir,\n\n  isNavigationDisabled: () => false,\n\n  renderHeader: ({ project, exportState, updateExportState }) => (\n    <Column noMargin>\n      <Line>\n        <Column noMargin>\n          <ExplanationHeader />\n        </Column>\n      </Line>\n      <Line>\n        <LocalFolderPicker\n          type=\"export\"\n          value={exportState.outputDir}\n          defaultPath={project.getLastCompilationDirectory()}\n          onChange={outputDir => {\n            updateExportState(() => ({ outputDir }));\n            project.setLastCompilationDirectory(outputDir);\n          }}\n          fullWidth\n        />\n      </Line>\n    </Column>\n  ),\n\n  renderLaunchButtonLabel: () => <Trans>Package</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      // TODO: Memory leak? Check for other exporters too.\n      const localFileSystem = new LocalFileSystem({\n        downloadUrlsToLocalFiles: true,\n      });\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n\n      return {\n        exporter,\n        localFileSystem,\n      };\n    });\n  },\n\n  launchExport: async (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, localFileSystem }: PreparedExporter,\n    fallbackAuthor: ?{ id: string, username: string }\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.ExportOptions(\n      context.project,\n      context.exportState.outputDir\n    );\n    exportOptions.setTarget('electron');\n    if (fallbackAuthor) {\n      exportOptions.setFallbackAuthor(\n        fallbackAuthor.id,\n        fallbackAuthor.username\n      );\n    }\n    exporter.exportWholePixiProject(exportOptions);\n    exportOptions.delete();\n    exporter.delete();\n\n    return {\n      urlFiles: localFileSystem.getAllUrlFilesIn(context.exportState.outputDir),\n    };\n  },\n\n  launchResourcesDownload: async (\n    context: ExportPipelineContext<ExportState>,\n    { urlFiles }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    await downloadUrlsToLocalFiles({\n      urlContainers: urlFiles,\n      onProgress: context.updateStepProgress,\n      throwIfAnyError: true,\n    });\n\n    return null;\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    exportOutput: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    return Promise.resolve(null);\n  },\n\n  renderDoneFooter: ({ exportState, onClose }) => {\n    const openExportFolder = () => {\n      if (shell) shell.openPath(exportState.outputDir);\n    };\n\n    return (\n      <DoneFooter\n        renderGameButton={() => (\n          <RaisedButton\n            key=\"open\"\n            label={<Trans>Open folder</Trans>}\n            primary={true}\n            onClick={openExportFolder}\n          />\n        )}\n      />\n    );\n  },\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\n\nimport React from 'react';\nimport RaisedButton from '../../UI/RaisedButton';\nimport { Column, Line } from '../../UI/Grid';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport LocalFileSystem, { type UrlFileDescriptor } from './LocalFileSystem';\nimport LocalFolderPicker from '../../UI/LocalFolderPicker';\nimport assignIn from 'lodash/assignIn';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport { ExplanationHeader, DoneFooter } from '../GenericExporters/HTML5Export';\nimport { downloadUrlsToLocalFiles } from '../../Utils/LocalFileDownloader';\nconst electron = optionalRequire('electron');\nconst shell = electron ? electron.shell : null;\n\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = {\n  outputDir: string,\n};\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  localFileSystem: LocalFileSystem,\n|};\n\ntype ExportOutput = {|\n  urlFiles: Array<UrlFileDescriptor>,\n|};\n\ntype ResourcesDownloadOutput = null;\n\ntype CompressionOutput = null;\n\nexport const localHTML5ExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'local-html5',\n\n  getInitialExportState: (project: gdProject) => ({\n    outputDir: project.getLastCompilationDirectory(),\n  }),\n\n  canLaunchBuild: exportState => !!exportState.outputDir,\n\n  isNavigationDisabled: () => false,\n\n  renderHeader: ({ project, exportState, updateExportState }) => (\n    <Column noMargin>\n      <Line>\n        <ExplanationHeader />\n      </Line>\n      <Line>\n        <LocalFolderPicker\n          type=\"export\"\n          value={exportState.outputDir}\n          defaultPath={project.getLastCompilationDirectory()}\n          onChange={outputDir => {\n            updateExportState(() => ({ outputDir }));\n            project.setLastCompilationDirectory(outputDir);\n          }}\n          fullWidth\n        />\n      </Line>\n    </Column>\n  ),\n\n  renderLaunchButtonLabel: () => <Trans>Export as a HTML5 game</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      // TODO: Memory leak? Check for other exporters too.\n      const localFileSystem = new LocalFileSystem({\n        downloadUrlsToLocalFiles: true,\n      });\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n\n      return {\n        exporter,\n        localFileSystem,\n      };\n    });\n  },\n\n  launchExport: async (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, localFileSystem }: PreparedExporter,\n    fallbackAuthor: ?{ id: string, username: string }\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.ExportOptions(\n      context.project,\n      context.exportState.outputDir\n    );\n    if (fallbackAuthor) {\n      exportOptions.setFallbackAuthor(\n        fallbackAuthor.id,\n        fallbackAuthor.username\n      );\n    }\n    exporter.exportWholePixiProject(exportOptions);\n    exportOptions.delete();\n    exporter.delete();\n\n    return {\n      urlFiles: localFileSystem.getAllUrlFilesIn(context.exportState.outputDir),\n    };\n  },\n\n  launchResourcesDownload: async (\n    context: ExportPipelineContext<ExportState>,\n    { urlFiles }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    await downloadUrlsToLocalFiles({\n      urlContainers: urlFiles,\n      onProgress: context.updateStepProgress,\n      throwIfAnyError: true,\n    });\n\n    return null;\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    exportOutput: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    return Promise.resolve(null);\n  },\n\n  renderDoneFooter: ({ exportState, onClose }) => {\n    const openExportFolder = () => {\n      if (shell) shell.openPath(exportState.outputDir);\n    };\n\n    return (\n      <DoneFooter\n        renderGameButton={() => (\n          <RaisedButton\n            fullWidth\n            primary\n            onClick={() => openExportFolder()}\n            label={<Trans>Open the exported game folder</Trans>}\n          />\n        )}\n      />\n    );\n  },\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\n\nimport React from 'react';\nimport RaisedButton from '../../UI/RaisedButton';\nimport { Column, Line } from '../../UI/Grid';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport LocalFileSystem, { type UrlFileDescriptor } from './LocalFileSystem';\nimport assignIn from 'lodash/assignIn';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport LocalFilePicker from '../../UI/LocalFilePicker';\nimport { archiveLocalFolder } from '../../Utils/LocalArchiver';\nimport {\n  ExplanationHeader,\n  DoneFooter,\n} from '../GenericExporters/FacebookInstantGamesExport';\nimport { downloadUrlsToLocalFiles } from '../../Utils/LocalFileDownloader';\nconst path = optionalRequire('path');\nconst electron = optionalRequire('electron');\nconst remote = optionalRequire('@electron/remote');\nconst app = remote ? remote.app : null;\nconst shell = electron ? electron.shell : null;\n\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = {\n  archiveOutputFilename: string,\n};\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  localFileSystem: LocalFileSystem,\n  temporaryOutputDir: string,\n|};\n\ntype ExportOutput = {|\n  temporaryOutputDir: string,\n  urlFiles: Array<UrlFileDescriptor>,\n|};\n\ntype ResourcesDownloadOutput = {|\n  temporaryOutputDir: string,\n|};\n\ntype CompressionOutput = string;\n\nexport const localFacebookInstantGamesExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'local-facebook-instant-games',\n\n  getInitialExportState: (project: gdProject) => ({\n    archiveOutputFilename: app\n      ? path.join(app.getPath('documents'), 'fb-instant-game.zip')\n      : '',\n  }),\n\n  canLaunchBuild: exportState => !!exportState.archiveOutputFilename,\n\n  isNavigationDisabled: () => false,\n\n  renderHeader: ({ project, exportState, updateExportState }) => (\n    <Column noMargin>\n      <Line>\n        <ExplanationHeader />\n      </Line>\n      <Line>\n        <LocalFilePicker\n          title={'Facebook Instant Games export zip file'}\n          message={\n            'Choose where to save the exported file for Facebook Instant Games'\n          }\n          filters={[\n            {\n              name: 'Compressed file for Facebook Instant Games',\n              extensions: ['zip'],\n            },\n          ]}\n          value={exportState.archiveOutputFilename}\n          defaultPath={app ? app.getPath('documents') : ''}\n          onChange={value =>\n            updateExportState(() => ({ archiveOutputFilename: value }))\n          }\n          fullWidth\n        />\n      </Line>\n    </Column>\n  ),\n\n  renderLaunchButtonLabel: () => <Trans>Package</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      // TODO: Memory leak? Check for other exporters too.\n      const localFileSystem = new LocalFileSystem({\n        downloadUrlsToLocalFiles: true,\n      });\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n      const temporaryOutputDir = path.join(\n        fileSystem.getTempDir(),\n        'FacebookInstantGamesExport'\n      );\n      fileSystem.mkDir(temporaryOutputDir);\n      fileSystem.clearDir(temporaryOutputDir);\n\n      return {\n        exporter,\n        localFileSystem,\n        temporaryOutputDir,\n      };\n    });\n  },\n\n  launchExport: async (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, localFileSystem, temporaryOutputDir }: PreparedExporter,\n    fallbackAuthor: ?{ id: string, username: string }\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.ExportOptions(\n      context.project,\n      temporaryOutputDir\n    );\n    exportOptions.setTarget('facebookInstantGames');\n    if (fallbackAuthor) {\n      exportOptions.setFallbackAuthor(\n        fallbackAuthor.id,\n        fallbackAuthor.username\n      );\n    }\n    exporter.exportWholePixiProject(exportOptions);\n    exportOptions.delete();\n    exporter.delete();\n\n    return {\n      temporaryOutputDir,\n      urlFiles: localFileSystem.getAllUrlFilesIn(temporaryOutputDir),\n    };\n  },\n\n  launchResourcesDownload: async (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir, urlFiles }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    await downloadUrlsToLocalFiles({\n      urlContainers: urlFiles,\n      onProgress: context.updateStepProgress,\n      throwIfAnyError: true,\n    });\n\n    return { temporaryOutputDir };\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir }: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    return archiveLocalFolder({\n      path: temporaryOutputDir,\n      outputFilename: context.exportState.archiveOutputFilename,\n    });\n  },\n\n  renderDoneFooter: ({ exportState, onClose }) => {\n    const openExportFolder = () => {\n      if (shell && path)\n        shell.openPath(path.dirname(exportState.archiveOutputFilename));\n    };\n\n    return (\n      <DoneFooter\n        renderGameButton={() => (\n          <RaisedButton\n            key=\"open\"\n            label={<Trans>Open folder</Trans>}\n            primary={true}\n            onClick={openExportFolder}\n          />\n        )}\n      />\n    );\n  },\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\nimport { t } from '@lingui/macro';\n\nimport * as React from 'react';\nimport TextField from '../TextField';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport FlatButton from '../FlatButton';\nconst electron = optionalRequire('electron');\nconst remote = optionalRequire('@electron/remote');\nconst dialog = remote ? remote.dialog : null;\n\nconst styles = {\n  container: {\n    position: 'relative',\n    display: 'flex',\n    alignItems: 'baseline',\n  },\n  button: {\n    marginLeft: 10,\n  },\n  textField: {\n    flex: 1,\n  },\n};\n\ntype Props = {|\n  value: string,\n  onChange: string => void,\n  title: string,\n  message: string,\n  defaultPath?: string,\n  fullWidth?: boolean,\n  filters: Array<{\n    name: string,\n    extensions: Array<string>,\n  }>,\n|};\n\nconst LocalFilePicker = ({\n  value,\n  onChange,\n  title,\n  message,\n  defaultPath,\n  fullWidth,\n  filters,\n}: Props) => {\n  const onChooseFolder = async () => {\n    if (!dialog || !electron) return;\n\n    const browserWindow = remote.getCurrentWindow();\n    const { filePath } = await dialog.showSaveDialog(browserWindow, {\n      title: title,\n      filters: filters,\n      message: message,\n      defaultPath: defaultPath,\n    });\n    onChange(filePath || '');\n  };\n\n  return (\n    <div\n      style={{\n        ...styles.container,\n        width: fullWidth ? '100%' : undefined,\n      }}\n    >\n      <TextField\n        margin=\"dense\"\n        style={styles.textField}\n        type=\"text\"\n        translatableHintText={t`Choose a file`}\n        value={value}\n        onChange={(event, value) => onChange(value)}\n      />\n      <FlatButton\n        label={<Trans>Choose</Trans>}\n        style={styles.button}\n        onClick={onChooseFolder}\n      />\n    </div>\n  );\n};\n\nexport default LocalFilePicker;\n","// @flow\nimport * as React from 'react';\nimport { Trans } from '@lingui/macro';\nimport assignIn from 'lodash/assignIn';\nimport {\n  type Build,\n  buildCordovaAndroid,\n  getBuildFileUploadOptions,\n} from '../../Utils/GDevelopServices/Build';\nimport { uploadLocalFile } from './LocalFileUploader';\nimport { type AuthenticatedUser } from '../../Profile/AuthenticatedUserContext';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport { archiveLocalFolder } from '../../Utils/LocalArchiver';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport LocalFileSystem, { type UrlFileDescriptor } from './LocalFileSystem';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport {\n  type ExportState,\n  SetupExportHeader,\n} from '../GenericExporters/OnlineCordovaExport';\nimport { downloadUrlsToLocalFiles } from '../../Utils/LocalFileDownloader';\nconst path = optionalRequire('path');\nconst os = optionalRequire('os');\nconst gd: libGDevelop = global.gd;\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  localFileSystem: LocalFileSystem,\n  temporaryOutputDir: string,\n|};\n\ntype ExportOutput = {|\n  temporaryOutputDir: string,\n  urlFiles: Array<UrlFileDescriptor>,\n|};\n\ntype ResourcesDownloadOutput = {|\n  temporaryOutputDir: string,\n|};\n\ntype CompressionOutput = string;\n\nexport const localOnlineCordovaExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'local-online-cordova',\n  onlineBuildType: 'cordova-build',\n  limitedBuilds: true,\n  packageNameWarningType: 'mobile',\n\n  getInitialExportState: () => ({\n    targets: ['androidApk'],\n    keystore: 'new',\n    signingDialogOpen: false,\n  }),\n\n  // Build can be launched only if just opened the dialog or build errored.\n  canLaunchBuild: (exportState, errored, exportStep) =>\n    errored || exportStep === '',\n\n  // Navigation is enabled when the build is errored or whilst uploading.\n  isNavigationDisabled: (exportStep, errored) =>\n    !errored &&\n    ['register', 'export', 'resources-download', 'compress', 'upload'].includes(\n      exportStep\n    ),\n\n  renderHeader: props => <SetupExportHeader {...props} />,\n\n  renderLaunchButtonLabel: () => <Trans>Packaging for Android</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      const localFileSystem = new LocalFileSystem({\n        downloadUrlsToLocalFiles: true,\n      });\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n      const temporaryOutputDir = path.join(\n        fileSystem.getTempDir(),\n        'OnlineCordovaExport'\n      );\n      fileSystem.mkDir(temporaryOutputDir);\n      fileSystem.clearDir(temporaryOutputDir);\n\n      return {\n        exporter,\n        localFileSystem,\n        temporaryOutputDir,\n      };\n    });\n  },\n\n  launchExport: async (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, localFileSystem, temporaryOutputDir }: PreparedExporter,\n    fallbackAuthor: ?{ id: string, username: string }\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.ExportOptions(\n      context.project,\n      temporaryOutputDir\n    );\n    exportOptions.setTarget('cordova');\n    if (fallbackAuthor) {\n      exportOptions.setFallbackAuthor(\n        fallbackAuthor.id,\n        fallbackAuthor.username\n      );\n    }\n    exporter.exportWholePixiProject(exportOptions);\n    exportOptions.delete();\n    exporter.delete();\n\n    return {\n      temporaryOutputDir,\n      urlFiles: localFileSystem.getAllUrlFilesIn(temporaryOutputDir),\n    };\n  },\n\n  launchResourcesDownload: async (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir, urlFiles }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    await downloadUrlsToLocalFiles({\n      urlContainers: urlFiles,\n      onProgress: context.updateStepProgress,\n      throwIfAnyError: true,\n    });\n\n    return { temporaryOutputDir };\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir }: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    const archiveOutputDir = os.tmpdir();\n    return archiveLocalFolder({\n      path: temporaryOutputDir,\n      outputFilename: path.join(archiveOutputDir, 'game-archive.zip'),\n    });\n  },\n\n  launchUpload: (\n    context: ExportPipelineContext<ExportState>,\n    outputFile: CompressionOutput\n  ): Promise<string> => {\n    return getBuildFileUploadOptions().then(uploadOptions => {\n      return uploadLocalFile(\n        outputFile,\n        uploadOptions,\n        context.updateStepProgress\n      ).then(() => uploadOptions.key);\n    });\n  },\n\n  launchOnlineBuild: (\n    exportState: ExportState,\n    authenticatedUser: AuthenticatedUser,\n    uploadBucketKey: string,\n    gameId: string,\n    options: {|\n      gameName: string,\n      gameVersion: string,\n    |}\n  ): Promise<Build> => {\n    const { getAuthorizationHeader, firebaseUser } = authenticatedUser;\n    if (!firebaseUser)\n      return Promise.reject(new Error('User is not authenticated'));\n\n    return buildCordovaAndroid(\n      getAuthorizationHeader,\n      firebaseUser.uid,\n      uploadBucketKey,\n      exportState.targets,\n      exportState.keystore,\n      gameId,\n      options\n    );\n  },\n};\n","// @flow\nimport * as React from 'react';\nimport { Trans } from '@lingui/macro';\nimport assignIn from 'lodash/assignIn';\nimport {\n  type Build,\n  buildElectron,\n  getBuildFileUploadOptions,\n} from '../../Utils/GDevelopServices/Build';\nimport { type AuthenticatedUser } from '../../Profile/AuthenticatedUserContext';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport { uploadLocalFile } from './LocalFileUploader';\nimport { archiveLocalFolder } from '../../Utils/LocalArchiver';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport LocalFileSystem, { type UrlFileDescriptor } from './LocalFileSystem';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport {\n  type ExportState,\n  SetupExportHeader,\n} from '../GenericExporters/OnlineElectronExport';\nimport { downloadUrlsToLocalFiles } from '../../Utils/LocalFileDownloader';\nconst path = optionalRequire('path');\nconst os = optionalRequire('os');\nconst gd: libGDevelop = global.gd;\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  localFileSystem: LocalFileSystem,\n  temporaryOutputDir: string,\n|};\n\ntype ExportOutput = {|\n  temporaryOutputDir: string,\n  urlFiles: Array<UrlFileDescriptor>,\n|};\n\ntype ResourcesDownloadOutput = {|\n  temporaryOutputDir: string,\n|};\n\ntype CompressionOutput = string;\n\nexport const localOnlineElectronExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'local-online-electron',\n  onlineBuildType: 'electron-build',\n  limitedBuilds: true,\n  packageNameWarningType: 'desktop',\n\n  getInitialExportState: () => ({\n    targets: ['winExe'],\n  }),\n\n  // Build can be launched only if just opened the dialog or build errored.\n  canLaunchBuild: (exportState, errored, exportStep) =>\n    !!exportState.targets.length && (errored || exportStep === ''),\n\n  // Navigation is enabled when the build is errored or whilst uploading.\n  isNavigationDisabled: (exportStep, errored) =>\n    !errored &&\n    ['register', 'export', 'resources-download', 'compress', 'upload'].includes(\n      exportStep\n    ),\n\n  renderHeader: props => <SetupExportHeader {...props} />,\n\n  renderLaunchButtonLabel: () => <Trans>Package</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      const localFileSystem = new LocalFileSystem({\n        downloadUrlsToLocalFiles: true,\n      });\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n      const temporaryOutputDir = path.join(\n        fileSystem.getTempDir(),\n        'OnlineElectronExport'\n      );\n      fileSystem.mkDir(temporaryOutputDir);\n      fileSystem.clearDir(temporaryOutputDir);\n\n      return {\n        exporter,\n        localFileSystem,\n        temporaryOutputDir,\n      };\n    });\n  },\n\n  launchExport: async (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, localFileSystem, temporaryOutputDir }: PreparedExporter,\n    fallbackAuthor: ?{ id: string, username: string }\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.ExportOptions(\n      context.project,\n      temporaryOutputDir\n    );\n    exportOptions.setTarget('electron');\n    if (fallbackAuthor) {\n      exportOptions.setFallbackAuthor(\n        fallbackAuthor.id,\n        fallbackAuthor.username\n      );\n    }\n    exporter.exportWholePixiProject(exportOptions);\n    exportOptions.delete();\n    exporter.delete();\n\n    return {\n      temporaryOutputDir,\n      urlFiles: localFileSystem.getAllUrlFilesIn(temporaryOutputDir),\n    };\n  },\n\n  launchResourcesDownload: async (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir, urlFiles }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    await downloadUrlsToLocalFiles({\n      urlContainers: urlFiles,\n      onProgress: context.updateStepProgress,\n      throwIfAnyError: true,\n    });\n\n    return { temporaryOutputDir };\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir }: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    const archiveOutputDir = os.tmpdir();\n    return archiveLocalFolder({\n      path: temporaryOutputDir,\n      outputFilename: path.join(archiveOutputDir, 'game-archive.zip'),\n    });\n  },\n\n  launchUpload: (\n    context: ExportPipelineContext<ExportState>,\n    outputFile: CompressionOutput\n  ): Promise<string> => {\n    return getBuildFileUploadOptions().then(uploadOptions => {\n      return uploadLocalFile(\n        outputFile,\n        uploadOptions,\n        context.updateStepProgress\n      ).then(() => uploadOptions.key);\n    });\n  },\n\n  launchOnlineBuild: (\n    exportState: ExportState,\n    authenticatedUser: AuthenticatedUser,\n    uploadBucketKey: string,\n    gameId: string,\n    options: {|\n      gameName: string,\n      gameVersion: string,\n    |}\n  ): Promise<Build> => {\n    const { getAuthorizationHeader, firebaseUser } = authenticatedUser;\n    if (!firebaseUser)\n      return Promise.reject(new Error('User is not authenticated'));\n\n    return buildElectron(\n      getAuthorizationHeader,\n      firebaseUser.uid,\n      uploadBucketKey,\n      exportState.targets,\n      gameId,\n      options\n    );\n  },\n};\n","// @flow\nimport * as React from 'react';\nimport { Trans } from '@lingui/macro';\nimport assignIn from 'lodash/assignIn';\nimport {\n  type Build,\n  buildWeb,\n  getBuildFileUploadOptions,\n} from '../../Utils/GDevelopServices/Build';\nimport { uploadLocalFile } from './LocalFileUploader';\nimport { type AuthenticatedUser } from '../../Profile/AuthenticatedUserContext';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport { archiveLocalFolder } from '../../Utils/LocalArchiver';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport LocalFileSystem, { type UrlFileDescriptor } from './LocalFileSystem';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport {\n  ExplanationHeader,\n  OnlineGameLink,\n} from '../GenericExporters/OnlineWebExport';\nimport { downloadUrlsToLocalFiles } from '../../Utils/LocalFileDownloader';\nconst path = optionalRequire('path');\nconst os = optionalRequire('os');\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = null;\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  localFileSystem: LocalFileSystem,\n  temporaryOutputDir: string,\n|};\n\ntype ExportOutput = {|\n  temporaryOutputDir: string,\n  urlFiles: Array<UrlFileDescriptor>,\n|};\n\ntype ResourcesDownloadOutput = {|\n  temporaryOutputDir: string,\n|};\n\ntype CompressionOutput = string;\n\nexport const localOnlineWebExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'local-online-web',\n  onlineBuildType: 'web-build',\n\n  getInitialExportState: () => null,\n\n  // Build can be launched if just opened the dialog or build errored, re-enabled when done.\n  canLaunchBuild: (exportState, errored, exportStep) =>\n    errored || exportStep === '' || exportStep === 'done',\n\n  // Navigation is enabled when the build is errored or if the build is not done.\n  isNavigationDisabled: (exportStep, errored) =>\n    !errored && !['', 'done'].includes(exportStep),\n\n  renderHeader: () => <ExplanationHeader />,\n\n  renderLaunchButtonLabel: () => <Trans>Generate link</Trans>,\n\n  renderCustomStepsProgress: ({\n    build,\n    project,\n    onSaveProject,\n    errored,\n    exportStep,\n  }) => (\n    <OnlineGameLink\n      build={build}\n      project={project}\n      onSaveProject={onSaveProject}\n      errored={errored}\n      exportStep={exportStep}\n    />\n  ),\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      const localFileSystem = new LocalFileSystem({\n        downloadUrlsToLocalFiles: true,\n      });\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n      const temporaryOutputDir = path.join(\n        fileSystem.getTempDir(),\n        'OnlineWebExport'\n      );\n      fileSystem.mkDir(temporaryOutputDir);\n      fileSystem.clearDir(temporaryOutputDir);\n\n      return {\n        exporter,\n        localFileSystem,\n        temporaryOutputDir,\n      };\n    });\n  },\n\n  launchExport: async (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, localFileSystem, temporaryOutputDir }: PreparedExporter,\n    fallbackAuthor: ?{ id: string, username: string }\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.ExportOptions(\n      context.project,\n      temporaryOutputDir\n    );\n    if (fallbackAuthor) {\n      exportOptions.setFallbackAuthor(\n        fallbackAuthor.id,\n        fallbackAuthor.username\n      );\n    }\n    exporter.exportWholePixiProject(exportOptions);\n    exportOptions.delete();\n    exporter.delete();\n\n    return {\n      temporaryOutputDir,\n      urlFiles: localFileSystem.getAllUrlFilesIn(temporaryOutputDir),\n    };\n  },\n\n  launchResourcesDownload: async (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir, urlFiles }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    await downloadUrlsToLocalFiles({\n      urlContainers: urlFiles,\n      onProgress: context.updateStepProgress,\n      throwIfAnyError: true,\n    });\n\n    return { temporaryOutputDir };\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir }: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    const archiveOutputDir = os.tmpdir();\n    return archiveLocalFolder({\n      path: temporaryOutputDir,\n      outputFilename: path.join(archiveOutputDir, 'game-archive.zip'),\n      sizeLimit: 250 * 1000 * 1000,\n    });\n  },\n\n  launchUpload: (\n    context: ExportPipelineContext<ExportState>,\n    outputFile: CompressionOutput\n  ): Promise<string> => {\n    return getBuildFileUploadOptions().then(uploadOptions => {\n      return uploadLocalFile(\n        outputFile,\n        uploadOptions,\n        context.updateStepProgress\n      ).then(() => uploadOptions.key);\n    });\n  },\n\n  launchOnlineBuild: (\n    exportState: ExportState,\n    authenticatedUser: AuthenticatedUser,\n    uploadBucketKey: string,\n    gameId: string,\n    options: {|\n      gameName: string,\n      gameVersion: string,\n    |}\n  ): Promise<Build> => {\n    const { getAuthorizationHeader, firebaseUser } = authenticatedUser;\n    if (!firebaseUser)\n      return Promise.reject(new Error('User is not authenticated'));\n\n    return buildWeb(\n      getAuthorizationHeader,\n      firebaseUser.uid,\n      uploadBucketKey,\n      gameId,\n      options\n    );\n  },\n};\n","// @flow\nimport * as React from 'react';\nimport optionalRequire from '../Utils/OptionalRequire';\nimport { useCommandWithOptions } from '../CommandPalette/CommandHooks';\nimport {\n  buildMainMenuDeclarativeTemplate,\n  type BuildMainMenuProps,\n  type MainMenuCallbacks,\n  type MainMenuEvent,\n} from './MainMenu';\nconst electron = optionalRequire('electron');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\n\n// Custom hook to register and deregister IPC listener\nconst useIPCEventListener = (ipcEvent: MainMenuEvent, func) => {\n  React.useEffect(\n    () => {\n      if (!ipcRenderer) return;\n      const handler = (event, ...eventArgs) => func(...eventArgs);\n      ipcRenderer.on(ipcEvent, handler);\n      return () => ipcRenderer.removeListener(ipcEvent, handler);\n    },\n    [ipcEvent, func]\n  );\n};\n\n/**\n * Create and update the editor main menu using Electron APIs.\n */\nconst ElectronMainMenu = ({\n  props,\n  callbacks,\n}: {|\n  props: BuildMainMenuProps,\n  callbacks: MainMenuCallbacks,\n|}) => {\n  const { i18n, project, recentProjectFiles, shortcutMap } = props;\n  const language = i18n.language;\n\n  // We could use a for loop, but for safety let's write every hook one by\n  // one to avoid any change at runtime which would break the rules of hooks.\n  useIPCEventListener('main-menu-open', callbacks.onChooseProject);\n  useIPCEventListener('main-menu-open-recent', callbacks.onOpenRecentFile);\n  useIPCEventListener('main-menu-save', callbacks.onSaveProject);\n  useIPCEventListener('main-menu-save-as', callbacks.onSaveProjectAs);\n  useIPCEventListener('main-menu-close', callbacks.onCloseProject);\n  useIPCEventListener('main-menu-close-app', callbacks.onCloseApp);\n  useIPCEventListener('main-menu-export', callbacks.onExportProject);\n  useIPCEventListener('main-menu-create-template', callbacks.onCreateProject);\n  useIPCEventListener('main-menu-create-blank', callbacks.onCreateBlank);\n  useIPCEventListener(\n    'main-menu-open-project-manager',\n    callbacks.onOpenProjectManager\n  );\n  useIPCEventListener('main-menu-open-home-page', callbacks.onOpenHomePage);\n  useIPCEventListener('main-menu-open-debugger', callbacks.onOpenDebugger);\n  useIPCEventListener('main-menu-open-about', callbacks.onOpenAbout);\n  useIPCEventListener(\n    'main-menu-open-preferences',\n    callbacks.onOpenPreferences\n  );\n  useIPCEventListener('main-menu-open-language', callbacks.onOpenLanguage);\n  useIPCEventListener('main-menu-open-profile', callbacks.onOpenProfile);\n  useIPCEventListener(\n    'main-menu-open-games-dashboard',\n    callbacks.onOpenGamesDashboard\n  );\n  useIPCEventListener('update-status', callbacks.setElectronUpdateStatus);\n\n  React.useEffect(\n    () => {\n      if (ipcRenderer) {\n        ipcRenderer.send(\n          'set-main-menu',\n          buildMainMenuDeclarativeTemplate({\n            project,\n            i18n,\n            recentProjectFiles,\n            shortcutMap,\n            isApplicationTopLevelMenu: true,\n          })\n        );\n      }\n    },\n    [i18n, language, project, recentProjectFiles, shortcutMap]\n  );\n\n  const { onOpenRecentFile } = callbacks;\n  useCommandWithOptions('OPEN_RECENT_PROJECT', true, {\n    generateOptions: React.useCallback(\n      () =>\n        recentProjectFiles.map(item => ({\n          text: item.fileMetadata.fileIdentifier,\n          handler: () => onOpenRecentFile(item),\n        })),\n      [onOpenRecentFile, recentProjectFiles]\n    ),\n  });\n\n  return null;\n};\n\nexport default ElectronMainMenu;\n","// @flow\n// Note: this file does not use export/imports and use Flow comments to allow its usage from Node.js\n\nconst { loadExtension } = require('.');\nconst optionalRequire = require('../Utils/OptionalRequire');\nconst { findJsExtensionModules } = require('./LocalJsExtensionsFinder');\n\n/*flow-include\nimport type {JsExtensionsLoader, TranslationFunction} from '.';\nimport ObjectsEditorService from '../ObjectEditor/ObjectsEditorService';\nimport ObjectsRenderingService from '../ObjectsRendering/ObjectsRenderingService';\n\ntype MakeExtensionsLoaderArguments = {|\n  gd: any,\n  objectsEditorService: typeof ObjectsEditorService,\n  objectsRenderingService: typeof ObjectsRenderingService,\n  filterExamples: boolean,\n  onFindGDJS?: ?() => Promise<{gdjsRoot: string}>\n|};\n*/\n\n/**\n * Loader that will find all JS extensions declared in GDJS/Runtime/Extensions/xxx/JsExtension.js.\n * If you add a new extension and also want it to be available for the web-app version, add it in\n * BrowserJsExtensionsLoader.js\n */\nmodule.exports = function makeExtensionsLoader(\n  {\n    gd,\n    objectsEditorService,\n    objectsRenderingService,\n    filterExamples,\n    onFindGDJS,\n  } /*: MakeExtensionsLoaderArguments*/\n) /*: JsExtensionsLoader*/ {\n  return {\n    loadAllExtensions: (_ /*: TranslationFunction */) => {\n      return findJsExtensionModules({ filterExamples, onFindGDJS }).then(\n        extensionModulePaths => {\n          return Promise.all(\n            extensionModulePaths.map(extensionModulePath => {\n              let extensionModule = null;\n              try {\n                extensionModule = optionalRequire(extensionModulePath, {\n                  rethrowException: true,\n                });\n              } catch (ex) {\n                return {\n                  extensionModulePath,\n                  result: {\n                    message:\n                      'Unable to import extension. Please check for any syntax error or error that would prevent it from being run.',\n                    error: true,\n                    rawError: ex,\n                  },\n                };\n              }\n\n              if (extensionModule) {\n                // Load any editor for objects, if we have somewhere where\n                // to register them.\n                if (\n                  objectsEditorService &&\n                  extensionModule.registerEditorConfigurations\n                ) {\n                  extensionModule.registerEditorConfigurations(\n                    objectsEditorService\n                  );\n                }\n\n                // Load any renderer for objects, if we have somewhere where\n                // to register them.\n                if (\n                  objectsRenderingService &&\n                  extensionModule.registerInstanceRenderers\n                ) {\n                  extensionModule.registerInstanceRenderers(\n                    objectsRenderingService\n                  );\n                }\n\n                return {\n                  extensionModulePath,\n                  result: loadExtension(\n                    _,\n                    gd,\n                    gd.JsPlatform.get(),\n                    extensionModule\n                  ),\n                };\n              }\n\n              return {\n                extensionModulePath,\n                result: {\n                  error: true,\n                  message:\n                    'Unknown error. Please check for any syntax error or error that would prevent it from being run.',\n                },\n              };\n            })\n          );\n        },\n        err => {\n          console.error(`Unable to find JS extensions modules`);\n          throw err;\n        }\n      );\n    },\n  };\n};\n","// Note: this file does not use export/imports nor Flow to allow its usage from Node.js\n\nconst { findGDJS } = require('../GameEngineFinder/LocalGDJSFinder');\nconst optionalRequire = require('../Utils/OptionalRequire');\nconst path = optionalRequire('path');\nconst fs = optionalRequire('fs');\n\nconst checkIfPathHasJsExtensionModule = extensionFolderPath => {\n  return new Promise(resolve => {\n    const jsExtensionModulePath = path.join(\n      extensionFolderPath,\n      'JsExtension.js'\n    );\n    fs.stat(jsExtensionModulePath, (err, stats) => {\n      if (err) {\n        return resolve(null);\n      }\n\n      return resolve(stats.isFile() ? jsExtensionModulePath : null);\n    });\n  });\n};\n\nconst findJsExtensionModules = ({ filterExamples, onFindGDJS }) => {\n  return (onFindGDJS ? onFindGDJS() : findGDJS()).then(({ gdjsRoot }) => {\n    const extensionsRoot = path.join(gdjsRoot, 'Runtime', 'Extensions');\n    console.info(\n      `Searching for JS extensions (file called JsExtension.js) in ${extensionsRoot}...`\n    );\n    return new Promise((resolve, reject) => {\n      fs.readdir(extensionsRoot, (error, extensionFolders) => {\n        if (error) {\n          return reject(error);\n        }\n\n        const filteredExtensionFolders = extensionFolders.filter(folder => {\n          if (!filterExamples) return true;\n\n          return folder.indexOf('Example') === -1;\n        });\n\n        Promise.all(\n          filteredExtensionFolders.map(extensionFolder =>\n            checkIfPathHasJsExtensionModule(\n              path.join(extensionsRoot, extensionFolder)\n            )\n          )\n        ).then(modulePaths => {\n          resolve(modulePaths.filter(modulePath => !!modulePath));\n        }, reject);\n      });\n    });\n  });\n};\n\nmodule.exports = {\n  findJsExtensionModules,\n};\n","// @flow\nimport {\n  type EventsFunctionCodeWriter,\n  type EventsFunctionCodeWriterCallbacks,\n} from '..';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport { getUID } from '../../Utils/LocalUserInfo';\nimport slugs from 'slugs';\nconst path = optionalRequire('path');\nconst os = optionalRequire('os');\nconst fs = optionalRequire('fs');\n\n/**\n * Create the EventsFunctionCodeWriter that writes generated code for events functions\n * to local files.\n */\nexport const makeLocalEventsFunctionCodeWriter = ({\n  onWriteFile,\n}: EventsFunctionCodeWriterCallbacks): EventsFunctionCodeWriter => {\n  // The generated code for extensions will be stored in a temporary directory\n\n  const outputDir = path.join(\n    os.tmpdir(),\n    `GDGeneratedEventsFunctions-` + getUID()\n  );\n  fs.mkdir(outputDir, err => {\n    if (err && err.code !== 'EEXIST') {\n      console.error(\n        'Unable to create the directory where to output events functions generated code: ',\n        err\n      );\n      return;\n    }\n  });\n\n  const getPathFor = (codeNamespace: string) => {\n    return `${outputDir}/${slugs(codeNamespace)}.js`;\n  };\n\n  return {\n    getIncludeFileFor: (codeNamespace: string) => getPathFor(codeNamespace),\n    writeFunctionCode: (\n      functionCodeNamespace: string,\n      code: string\n    ): Promise<void> => {\n      return new Promise((resolve, reject) => {\n        const includeFile = getPathFor(functionCodeNamespace);\n        onWriteFile({ includeFile, content: code });\n        fs.writeFile(includeFile, code, err => {\n          if (err) return reject(err);\n\n          resolve();\n        });\n      });\n    },\n    writeBehaviorCode: (\n      behaviorCodeNamespace: string,\n      code: string\n    ): Promise<void> => {\n      return new Promise((resolve, reject) => {\n        const includeFile = getPathFor(behaviorCodeNamespace);\n        onWriteFile({ includeFile, content: code });\n        fs.writeFile(includeFile, code, err => {\n          if (err) return reject(err);\n\n          resolve();\n        });\n      });\n    },\n    writeObjectCode: (\n      objectCodeNamespace: string,\n      code: string\n    ): Promise<void> => {\n      return new Promise((resolve, reject) => {\n        const includeFile = getPathFor(objectCodeNamespace);\n        onWriteFile({ includeFile, content: code });\n        fs.writeFile(includeFile, code, err => {\n          if (err) return reject(err);\n\n          resolve();\n        });\n      });\n    },\n  };\n};\n","// @flow\nimport { serializeToJSObject } from '../../Utils/Serializer';\nimport optionalRequire from '../../Utils/OptionalRequire';\nconst fs = optionalRequire('fs-extra');\nconst path = optionalRequire('path');\nconst remote = optionalRequire('@electron/remote');\nconst dialog = remote ? remote.dialog : null;\n\nconst writeJSONFile = (object: Object, filepath: string): Promise<void> => {\n  if (!fs) return Promise.reject(new Error('Filesystem is not supported.'));\n\n  try {\n    const content = JSON.stringify(object, null, 2);\n    return fs.ensureDir(path.dirname(filepath)).then(\n      () =>\n        new Promise((resolve, reject) => {\n          fs.writeFile(filepath, content, (err: ?Error) => {\n            if (err) {\n              return reject(err);\n            }\n\n            return resolve();\n          });\n        })\n    );\n  } catch (stringifyException) {\n    return Promise.reject(stringifyException);\n  }\n};\n\nexport default class LocalEventsFunctionsExtensionWriter {\n  static chooseEventsFunctionExtensionFile = (\n    extensionName?: string\n  ): Promise<?string> => {\n    if (!dialog) return Promise.reject('Not supported');\n    const browserWindow = remote.getCurrentWindow();\n\n    return dialog\n      .showSaveDialog(browserWindow, {\n        title: 'Export an extension of the project',\n        filters: [\n          {\n            name: 'GDevelop 5 \"events based\" extension',\n            extensions: ['json'],\n          },\n        ],\n        defaultPath: extensionName || 'Extension.json',\n      })\n      .then(({ filePath }) => {\n        if (!filePath) return null;\n        return filePath;\n      });\n  };\n\n  static writeEventsFunctionsExtension = (\n    extension: gdEventsFunctionsExtension,\n    filepath: string\n  ): Promise<void> => {\n    const serializedObject = serializeToJSObject(extension);\n    return writeJSONFile(serializedObject, filepath).catch(err => {\n      console.error('Unable to write the events function extension:', err);\n      throw err;\n    });\n  };\n\n  static chooseCustomObjectFile = (objectName?: string): Promise<?string> => {\n    if (!dialog) return Promise.reject('Not supported');\n    const browserWindow = remote.getCurrentWindow();\n\n    return dialog\n      .showSaveDialog(browserWindow, {\n        title: 'Export an object of the project',\n        filters: [\n          {\n            name: 'GDevelop 5 object configuration',\n            extensions: ['gdo'],\n          },\n        ],\n        defaultPath: objectName || 'Object',\n      })\n      .then(({ filePath }) => {\n        if (!filePath) return null;\n        return filePath;\n      });\n  };\n\n  static writeCustomObject = (\n    customObject: gdObject,\n    filepath: string\n  ): Promise<void> => {\n    const exportedObject = customObject.clone().get();\n    exportedObject.setTags('');\n    exportedObject.getVariables().clear();\n    exportedObject.getEffects().clear();\n    exportedObject\n      .getAllBehaviorNames()\n      .toJSArray()\n      .forEach(name => exportedObject.removeBehavior(name));\n    const serializedObject = serializeToJSObject(exportedObject);\n    return writeJSONFile(serializedObject, filepath).catch(err => {\n      console.error('Unable to write the object:', err);\n      throw err;\n    });\n  };\n}\n","// @flow\nimport optionalRequire from '../../Utils/OptionalRequire';\nconst fs = optionalRequire('fs');\nconst remote = optionalRequire('@electron/remote');\nconst dialog = remote ? remote.dialog : null;\n\nconst readJSONFile = (filepath: string): Promise<Object> => {\n  if (!fs) return Promise.reject('Filesystem is not supported.');\n\n  return new Promise((resolve, reject) => {\n    fs.readFile(filepath, { encoding: 'utf8' }, (err, data) => {\n      if (err) return reject(err);\n\n      try {\n        const dataObject = JSON.parse(data);\n        return resolve(dataObject);\n      } catch (ex) {\n        return reject(filepath + ' is a corrupted/malformed file.');\n      }\n    });\n  });\n};\n\nexport default class LocalEventsFunctionsExtensionOpener {\n  static chooseEventsFunctionExtensionFile = (): Promise<?string> => {\n    if (!dialog) return Promise.reject('Not supported');\n    const browserWindow = remote.getCurrentWindow();\n\n    return dialog\n      .showOpenDialog(browserWindow, {\n        title: 'Import an extension in the project',\n        properties: ['openFile'],\n        message: 'Choose an extension file to import (.json file)',\n        filters: [\n          {\n            name: 'GDevelop 5 \"events based\" extension',\n            extensions: ['json'],\n          },\n        ],\n      })\n      .then(({ filePaths }) => {\n        if (!filePaths || !filePaths.length) return null;\n        return filePaths[0];\n      });\n  };\n\n  static readEventsFunctionExtensionFile = (\n    filepath: string\n  ): Promise<Object> => {\n    return readJSONFile(filepath);\n  };\n}\n","// @flow\nimport * as React from 'react';\nimport optionalRequire from '../Utils/OptionalRequire';\nimport PreferencesContext from '../MainFrame/Preferences/PreferencesContext';\nconst electron = optionalRequire('electron');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\n\n/**\n * Set up some watchers for GDJS and Extensions sources.\n * Stop the watchers when the component is unmounted or `shouldWatch` prop is false.\n */\nexport const LocalGDJSDevelopmentWatcher = () => {\n  const preferences = React.useContext(PreferencesContext);\n  const shouldWatch = preferences.values.useGDJSDevelopmentWatcher;\n\n  React.useEffect(\n    () => {\n      if (!shouldWatch) {\n        // Nothing to set up in the effect if watch is deactivated.\n        return;\n      }\n\n      if (!ipcRenderer) {\n        console.error(\n          'Unable to find ipcRenderer to set up GDJS development watchers'\n        );\n        return;\n      }\n\n      ipcRenderer.send('setup-local-gdjs-development-watcher');\n      return () => {\n        ipcRenderer.send('close-local-gdjs-development-watcher');\n      };\n    },\n    [shouldWatch]\n  );\n\n  return null;\n};\n","// @flow\nimport {\n  type MoveAllProjectResourcesOptions,\n  type MoveAllProjectResourcesResult,\n  type MoveAllProjectResourcesFunction,\n} from './index';\nimport LocalFileStorageProvider from '../LocalFileStorageProvider';\nimport { moveUrlResourcesToLocalFiles } from '../LocalFileStorageProvider/LocalFileResourceMover';\nimport UrlStorageProvider from '../UrlStorageProvider';\nimport CloudStorageProvider from '../CloudStorageProvider';\nimport LocalFileSystem from '../../Export/LocalExporters/LocalFileSystem';\nimport assignIn from 'lodash/assignIn';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport { moveAllCloudProjectResourcesToCloudProject } from '../CloudStorageProvider/CloudResourceMover';\nimport { checkIfIsGDevelopCloudBucketUrl } from '../../Utils/CrossOrigin';\nimport {\n  getCredentialsForCloudProject,\n  uploadProjectResourceFiles,\n  type UploadedProjectResourceFiles,\n} from '../../Utils/GDevelopServices/Project';\nimport { processByChunk } from '../../Utils/ProcessByChunk';\nimport { readLocalFileToFile } from '../../Utils/LocalFileUploader';\nimport { isURL, isBlobURL } from '../../ResourcesList/ResourceUtils';\nconst path = optionalRequire('path');\n\nconst gd: libGDevelop = global.gd;\n\nconst moveNothing = async () => {\n  return {\n    erroredResources: [],\n  };\n};\n\ntype ResourceAndFile = {|\n  resource: gdResource,\n  file: File,\n|};\n\nexport const moveAllLocalResourcesToCloudResources = async ({\n  project,\n  authenticatedUser,\n  oldFileMetadata,\n  newFileMetadata,\n  onProgress,\n}: MoveAllProjectResourcesOptions): Promise<MoveAllProjectResourcesResult> => {\n  const result: MoveAllProjectResourcesResult = {\n    erroredResources: [],\n  };\n\n  const newCloudProjectId = newFileMetadata.fileIdentifier;\n\n  const resourcesManager = project.getResourcesManager();\n\n  /**\n   * Find the local resources that must be\n   * uploaded into the new project.\n   */\n  const getResourcesToUpload = (project: gdProject): Array<gdResource> => {\n    const allResourceNames = resourcesManager.getAllResourceNames().toJSArray();\n    return allResourceNames\n      .map(\n        (resourceName: string): ?gdResource => {\n          const resource = resourcesManager.getResource(resourceName);\n          const resourceFile = resource.getFile();\n\n          if (isURL(resourceFile)) {\n            if (checkIfIsGDevelopCloudBucketUrl(resourceFile)) {\n              // URL from a cloud project: this is unlikely and would not work\n              // (as the project is a local project). Still, ignore this.\n              return null;\n            } else if (isBlobURL(resourceFile)) {\n              result.erroredResources.push({\n                resourceName: resource.getName(),\n                error: new Error('Unsupported blob URL.'),\n              });\n              return null;\n            } else {\n              // Public URL resource: nothing to do.\n              return null;\n            }\n          } else {\n            // Local resource to be downloaded.\n            return resource;\n          }\n        }\n      )\n      .filter(Boolean);\n  };\n\n  const allResourcesToUpload = getResourcesToUpload(project);\n\n  const projectPath = path.dirname(oldFileMetadata.fileIdentifier);\n\n  let alreadyDoneCount = 0;\n  // Read all files as Files.\n  await processByChunk(allResourcesToUpload, {\n    transformItem: async (resource): Promise<ResourceAndFile | null> => {\n      const resourceAbsolutePath = path.resolve(\n        projectPath,\n        resource.getFile()\n      );\n\n      try {\n        const file = await readLocalFileToFile(resourceAbsolutePath);\n        return {\n          resource,\n          file,\n        };\n      } catch (error) {\n        result.erroredResources.push({\n          resourceName: resource.getName(),\n          error: new Error(\n            `Unable to open the file (${resourceAbsolutePath}).`\n          ),\n        });\n        return null;\n      }\n    },\n    isChunkTooBig: (resourceAndFilesChunk: Array<ResourceAndFile | null>) => {\n      if (resourceAndFilesChunk.length > 70) return true;\n\n      const allBufferSize = resourceAndFilesChunk\n        .filter(Boolean)\n        .reduce((size, { file }) => size + file.size, 0);\n\n      // Stop a chunk when more than 150MB are read to be uploaded. This is\n      // to avoid loading all resources in memory at once. This don't give an exact\n      // guarantee on the upper bound (a single file could be more than 150MB), but\n      // this limits the risks of running out of memory.\n      return allBufferSize > 150 * 1000 * 1000;\n    },\n    processChunk: async (\n      resourceAndFilesChunk: Array<ResourceAndFile | null>\n    ) => {\n      const resourceAndFilesToUpload: ResourceAndFile[] = resourceAndFilesChunk.filter(\n        Boolean\n      );\n\n      // Upload the files just read, for the new project.\n      await getCredentialsForCloudProject(authenticatedUser, newCloudProjectId);\n      const uploadedProjectResourceFiles: UploadedProjectResourceFiles = await uploadProjectResourceFiles(\n        authenticatedUser,\n        newCloudProjectId,\n        resourceAndFilesToUpload.map(({ file }) => file),\n        (count, total) => {\n          onProgress(alreadyDoneCount + count, allResourcesToUpload.length);\n        }\n      );\n      alreadyDoneCount += resourceAndFilesChunk.length;\n\n      // Update resources with the newly created URLs.\n      uploadedProjectResourceFiles.forEach(({ url, error }, index) => {\n        const resource = resourceAndFilesToUpload[index].resource;\n        if (error || !url) {\n          result.erroredResources.push({\n            resourceName: resource.getName(),\n            error: error || new Error('Unknown error during upload.'),\n          });\n          return;\n        }\n\n        resource.setFile(url);\n      });\n    },\n  });\n\n  return result;\n};\n\nconst movers: {\n  [string]: MoveAllProjectResourcesFunction,\n} = {\n  [`${LocalFileStorageProvider.internalName}=>${\n    LocalFileStorageProvider.internalName\n  }`]: async ({ project, newFileMetadata }: MoveAllProjectResourcesOptions) => {\n    // TODO: Ideally, errors while copying resources should be reported.\n    // TODO: Report progress.\n    const projectPath = path.dirname(newFileMetadata.fileIdentifier);\n    const fileSystem = assignIn(\n      new gd.AbstractFileSystemJS(),\n      new LocalFileSystem()\n    );\n    gd.ProjectResourcesCopier.copyAllResourcesTo(\n      project,\n      // $FlowFixMe - fileSystem is a gdAbstractFileSystem, despite the assignIn.\n      fileSystem,\n      projectPath,\n      true, // Update the project with the new resource paths\n      false, // Don't move absolute files\n      true // Keep relative files folders structure.\n    );\n    return {\n      erroredResources: [],\n    };\n  },\n  // When saving a Cloud project locally, all resources are downloaded (including\n  // the ones on GDevelop Cloud).\n  [`${CloudStorageProvider.internalName}=>${\n    LocalFileStorageProvider.internalName\n  }`]: ({ project, newFileMetadata, onProgress }) =>\n    moveUrlResourcesToLocalFiles({\n      project,\n      fileMetadata: newFileMetadata,\n      onProgress,\n    }),\n  // On the desktop app, try to download all URLs into local files, put\n  // next to the project file (in a \"assets\" directory). This is helpful\n  // to continue working on a game started on the web-app (using public URLs\n  // for resources).\n  [`${UrlStorageProvider.internalName}=>${\n    LocalFileStorageProvider.internalName\n  }`]: ({ project, newFileMetadata, onProgress }) =>\n    moveUrlResourcesToLocalFiles({\n      project,\n      fileMetadata: newFileMetadata,\n      onProgress,\n    }),\n\n  // Moving to GDevelop \"Cloud\" storage:\n\n  // From a local project to a Cloud project, all resources are uploaded.\n  [`${LocalFileStorageProvider.internalName}=>${\n    CloudStorageProvider.internalName\n  }`]: moveAllLocalResourcesToCloudResources,\n  // From a Cloud project to another, resources need to be copied\n  // (unless they are public URLs).\n  [`${CloudStorageProvider.internalName}=>${\n    CloudStorageProvider.internalName\n  }`]: moveAllCloudProjectResourcesToCloudProject,\n  // Nothing to move around when going from a project on a public URL\n  // to a cloud project (we could offer an option one day though to download\n  // and upload the URL resources on GDevelop Cloud).\n  [`${UrlStorageProvider.internalName}=>${\n    CloudStorageProvider.internalName\n  }`]: moveNothing,\n};\n\nconst LocalResourceMover = {\n  moveAllProjectResources: async (\n    options: MoveAllProjectResourcesOptions\n  ): Promise<MoveAllProjectResourcesResult> => {\n    const { oldStorageProvider, newStorageProvider } = options;\n    const mover =\n      movers[\n        `${oldStorageProvider.internalName}=>${newStorageProvider.internalName}`\n      ];\n    if (!mover)\n      throw new Error(\n        `Can't find a ResourceMover for ${oldStorageProvider.internalName} to ${\n          newStorageProvider.internalName\n        }.`\n      );\n\n    return mover(options);\n  },\n};\n\nexport default LocalResourceMover;\n","// @flow\n\nexport const processByChunk = async <Item, MappedItem>(\n  array: Array<Item>,\n  {\n    transformItem,\n    isChunkTooBig,\n    processChunk,\n  }: {|\n    transformItem: Item => Promise<MappedItem>,\n    isChunkTooBig: (MappedItem[]) => boolean,\n    processChunk: (MappedItem[]) => Promise<void>,\n  |}\n): Promise<void> => {\n  let currentItemIndex = 0;\n  const nextChunk: Array<MappedItem> = [];\n\n  while (currentItemIndex < array.length) {\n    const mappedItem = await transformItem(array[currentItemIndex]);\n\n    if (!nextChunk.length) {\n      // Existing chunk is empty - let the new item be added to it.\n    } else {\n      if (!isChunkTooBig([...nextChunk, mappedItem])) {\n        // Item can be added to the existing chunk - let's add it.\n      } else {\n        // Item can't be added to the existing chunk - process the existing chunk\n        await processChunk(nextChunk);\n        nextChunk.length = 0;\n      }\n    }\n\n    nextChunk.push(mappedItem);\n    currentItemIndex++;\n  }\n\n  if (nextChunk.length) {\n    await processChunk(nextChunk);\n    nextChunk.length = 0;\n  }\n\n  return;\n};\n","// @flow\r\nimport optionalRequire from './OptionalRequire';\r\nconst path = optionalRequire('path');\r\nconst fs = optionalRequire('fs');\r\n\r\nconst readLocalFileToArrayBuffer = async (\r\n  filePath: string\r\n): Promise<ArrayBuffer> => {\r\n  const buffer: Buffer = await new Promise((resolve, reject) => {\r\n    fs.readFile(filePath, function(err, buffer) {\r\n      if (err) {\r\n        reject(err);\r\n        return;\r\n      }\r\n\r\n      resolve(buffer);\r\n    });\r\n  });\r\n\r\n  // See https://stackoverflow.com/questions/8609289/convert-a-binary-nodejs-buffer-to-javascript-arraybuffer:\r\n  // The slice and offset stuff is required because small Buffers (less than 4 kB by default, half the pool size)\r\n  // can be views on a shared ArrayBuffer. Without slicing, you can end up with an ArrayBuffer containing data from another Buffer.\r\n  const arrayBuffer = buffer.buffer.slice(\r\n    buffer.byteOffset,\r\n    buffer.byteOffset + buffer.byteLength\r\n  );\r\n  return arrayBuffer;\r\n};\r\n\r\n// See https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types.\r\nconst extensionToMimeType = {\r\n  // Common audio extensions:\r\n  aac: 'audio/aac',\r\n  wav: 'audio/wav',\r\n  mp3: 'audio/mp3',\r\n  ogg: 'audio/ogg',\r\n\r\n  // Common image extensions:\r\n  png: 'image/png',\r\n  jpg: 'image/jpeg',\r\n  jpeg: 'image/jpeg',\r\n  webp: 'image/webp',\r\n\r\n  // Common font extensions:\r\n  ttf: 'font/ttf',\r\n  otf: 'font/otf',\r\n\r\n  // Common video extensions:\r\n  mp4: 'video/mp4',\r\n  webm: 'video/webm',\r\n\r\n  // Other common extensions:\r\n  json: 'application/json',\r\n  xml: 'application/xml',\r\n  gz: 'application/gzip',\r\n  js: 'application/javascript',\r\n};\r\n\r\nexport const readLocalFileToFile = async (filePath: string): Promise<File> => {\r\n  const arrayBuffer = await readLocalFileToArrayBuffer(filePath);\r\n  const extensionWithoutLeadingDot = path.extname(filePath).replace(/^\\./, '');\r\n  return new File([arrayBuffer], path.basename(filePath), {\r\n    type:\r\n      extensionToMimeType[extensionWithoutLeadingDot] ||\r\n      'application/octet-stream',\r\n  });\r\n};\r\n","// @flow\nimport {\n  type ResourceFetcher,\n  type FetchAllProjectResourcesOptions,\n  type FetchAllProjectResourcesResult,\n  type FetchAllProjectResourcesFunction,\n} from './index';\nimport LocalFileStorageProvider from '../LocalFileStorageProvider';\nimport { moveUrlResourcesToLocalFiles } from '../LocalFileStorageProvider/LocalFileResourceMover';\nimport UrlStorageProvider from '../UrlStorageProvider';\nimport CloudStorageProvider from '../CloudStorageProvider';\nimport { fetchRelativeResourcesToFullUrls } from '../UrlStorageProvider/UrlResourceFetcher';\nimport { moveUrlResourcesToCloudFilesIfPrivate } from '../CloudStorageProvider/CloudResourceFetcher';\n\nconst fetchers: {\n  [string]: FetchAllProjectResourcesFunction,\n} = {\n  // The Cloud file storage provider fetches the resources that are\n  // private URLs by downloading them and reuploading them to the cloud.\n  [CloudStorageProvider.internalName]: moveUrlResourcesToCloudFilesIfPrivate,\n  // The local file storage provider fetches the resources that are URLs\n  // by downloading them locally.\n  [LocalFileStorageProvider.internalName]: moveUrlResourcesToLocalFiles,\n  // The URL storage consider relative resources to be relative to the project\n  // URL. This allows to open local projects uploaded to GitHub for example.\n  [UrlStorageProvider.internalName]: fetchRelativeResourcesToFullUrls,\n};\n\nconst LocalResourceFetcher: ResourceFetcher = {\n  fetchAllProjectResources: async (\n    options: FetchAllProjectResourcesOptions\n  ): Promise<FetchAllProjectResourcesResult> => {\n    const { storageProvider } = options;\n    const fetcher = fetchers[storageProvider.internalName];\n    if (!fetcher)\n      throw new Error(\n        `Can't find a ResourceFetcher for ${\n          storageProvider.internalName\n        } - have you registered the storage provider here?`\n      );\n\n    return fetcher(options);\n  },\n};\n\nexport default LocalResourceFetcher;\n","// @flow\nimport optionalRequire from '../Utils/OptionalRequire';\nimport newNameGenerator from '../Utils/NewNameGenerator';\nimport { isPathInProjectFolder } from './ResourceUtils';\nimport { createNewResource } from './ResourceSource';\nconst fs = optionalRequire('fs');\nconst path = optionalRequire('path');\n\nexport type EmbeddedResource = {|\n  resourceKind: string,\n  resourceName?: string,\n\n  /** The \"path\" to the embedded resource (e.g: a tileset) as stored in the parent resource (e.g: a tilemap). */\n  relPath: string,\n\n  /** The full path to the file of the embedded resource. */\n  fullPath: string,\n\n  /** True if the embedded resource file is outside the project folder. */\n  isOutsideProjectFolder: boolean,\n|};\n\nexport type EmbeddedResources = {|\n  hasAnyEmbeddedResourceOutsideProjectFolder: boolean,\n  embeddedResources: Map<string, EmbeddedResource>,\n|};\n\nexport type MappedResources = {|\n  mapping: { [key: string]: string },\n|};\n\ntype ParseEmbeddedFiles = (\n  project: gdProject,\n  filePath: string\n) => Promise<?EmbeddedResources>;\n\n/**\n * Copy the embedded resources inside the project folder\n */\nexport async function copyAllEmbeddedResourcesToProjectFolder(\n  project: gdProject,\n  filesWithEmbeddedResources: Map<string, EmbeddedResources>\n) {\n  if (!fs || !path) {\n    return;\n  }\n\n  const projectPath = path.dirname(project.getProjectFile());\n  const copies = [];\n\n  for (const {\n    hasAnyEmbeddedResourceOutsideProjectFolder,\n    embeddedResources,\n  } of filesWithEmbeddedResources.values()) {\n    if (!hasAnyEmbeddedResourceOutsideProjectFolder) continue;\n\n    for (const embedded of embeddedResources.values()) {\n      if (!embedded.isOutsideProjectFolder) continue;\n\n      const resourceBasename = path.basename(embedded.fullPath);\n      const fileExtension = path.extname(resourceBasename);\n      const fileNameWithoutExtension = path.basename(\n        resourceBasename,\n        fileExtension\n      );\n\n      const newFileNameWithoutExtension = newNameGenerator(\n        fileNameWithoutExtension,\n        tentativeFileName => {\n          const tentativePath =\n            path.join(projectPath, tentativeFileName) + fileExtension;\n          return fs.existsSync(tentativePath);\n        }\n      );\n\n      const resourceNewPath = path.join(\n        projectPath,\n        newFileNameWithoutExtension + fileExtension\n      );\n\n      embedded.resourceName = newFileNameWithoutExtension + fileExtension;\n\n      copies.push(fs.promises.copyFile(embedded.fullPath, resourceNewPath));\n    }\n  }\n\n  return Promise.all(copies);\n}\n\n/**\n * Create the mapping between embedded resource path (e.g: path to a tileset) to its resource name (i.e: the name of\n * the resource containing the tileset).\n */\nexport function createAndMapEmbeddedResources(\n  project: gdProject,\n  filesWithEmbeddedResources: Map<string, EmbeddedResources>\n): Map<string, MappedResources> {\n  const projectPath = path.dirname(project.getProjectFile());\n\n  const filesWithMappedResources = new Map<string, MappedResources>();\n  for (const [filePath, { embeddedResources }] of filesWithEmbeddedResources) {\n    const mapping = {};\n    for (let {\n      resourceKind,\n      resourceName,\n      relPath,\n      fullPath,\n    } of embeddedResources.values()) {\n      if (!resourceName) {\n        resourceName = path.relative(projectPath, fullPath);\n      }\n\n      const theEmbeddedResource = createNewResource(resourceKind);\n      if (theEmbeddedResource) {\n        theEmbeddedResource.setName(resourceName);\n        theEmbeddedResource.setFile(resourceName);\n\n        mapping[relPath] = resourceName;\n\n        project.getResourcesManager().addResource(theEmbeddedResource);\n      }\n    }\n\n    filesWithMappedResources.set(filePath, {\n      mapping,\n    });\n  }\n\n  return filesWithMappedResources;\n}\n\n/**\n * List the embedded resources of a Tilemap (or JSON) resource.\n * Supports LDtk tilemaps.\n *\n * @param project The project\n * @param filePath The file path of a resource\n * @returns\n */\nexport async function listTileMapEmbeddedResources(\n  project: gdProject,\n  filePath: string\n): Promise<?EmbeddedResources> {\n  if (!fs || !path) {\n    return null;\n  }\n\n  const data = await fs.promises.readFile(filePath, 'utf8');\n  try {\n    const tileMap = JSON.parse(data);\n\n    // For LDtk tilemaps, read the tilesets.\n    if (tileMap && tileMap.__header__ && tileMap.__header__.app === 'LDtk') {\n      const dir = path.dirname(filePath);\n      const embeddedResources = new Map<string, EmbeddedResource>();\n      let hasAnyEmbeddedResourceOutsideProjectFolder = false;\n\n      for (const tileset of tileMap.defs.tilesets) {\n        if (tileset.relPath) {\n          const relPath = tileset.relPath;\n          const fullPath = path.resolve(dir, relPath);\n          const isOutsideProjectFolder = !isPathInProjectFolder(\n            project,\n            fullPath\n          );\n          const resource: EmbeddedResource = {\n            resourceKind: 'image',\n            relPath,\n            fullPath,\n            isOutsideProjectFolder,\n          };\n\n          embeddedResources.set(relPath, resource);\n\n          if (isOutsideProjectFolder)\n            hasAnyEmbeddedResourceOutsideProjectFolder = true;\n        }\n      }\n\n      for (const level of tileMap.levels) {\n        if (level.bgRelPath) {\n          const relPath = level.bgRelPath;\n          const fullPath = path.resolve(dir, relPath);\n          const isOutsideProjectFolder = !isPathInProjectFolder(\n            project,\n            fullPath\n          );\n          const resource: EmbeddedResource = {\n            resourceKind: 'image',\n            relPath,\n            fullPath,\n            isOutsideProjectFolder,\n          };\n\n          embeddedResources.set(level.bgRelPath, resource);\n\n          if (isOutsideProjectFolder)\n            hasAnyEmbeddedResourceOutsideProjectFolder = true;\n        }\n      }\n\n      return {\n        hasAnyEmbeddedResourceOutsideProjectFolder,\n        embeddedResources,\n      };\n    }\n  } catch (error) {\n    console.error(\n      `Unable to read properly the data from file ${filePath} for use as a tilemap - ignoring any potentially embedded resources.`\n    );\n    return null;\n  }\n}\n\nexport const embeddedResourcesParsers: { [string]: ParseEmbeddedFiles } = {\n  tilemap: listTileMapEmbeddedResources,\n  json: listTileMapEmbeddedResources,\n};\n","// @flow\nimport { t, Trans } from '@lingui/macro';\nimport * as React from 'react';\nimport {\n  type ChooseResourceOptions,\n  type ChooseResourceProps,\n  type ResourceSourceComponentProps,\n  type ResourceSource,\n  allResourceKindsAndMetadata,\n} from './ResourceSource';\nimport { ResourceStore } from '../AssetStore/ResourceStore';\nimport { isPathInProjectFolder, copyAllToProjectFolder } from './ResourceUtils';\nimport optionalRequire from '../Utils/OptionalRequire';\nimport Window from '../Utils/Window';\nimport {\n  copyAllEmbeddedResourcesToProjectFolder,\n  embeddedResourcesParsers,\n  createAndMapEmbeddedResources,\n  type EmbeddedResources,\n  type MappedResources,\n} from './LocalEmbeddedResourceSources';\nimport { Line } from '../UI/Grid';\nimport RaisedButton from '../UI/RaisedButton';\nimport { FileToCloudProjectResourceUploader } from './FileToCloudProjectResourceUploader';\n\nconst remote = optionalRequire('@electron/remote');\nconst dialog = remote ? remote.dialog : null;\nconst path = optionalRequire('path');\n\ntype ResourceStoreChooserProps = {\n  options: ChooseResourceOptions,\n  onChooseResources: (resources: Array<gdResource>) => void,\n  createNewResource: () => gdResource,\n};\n\nconst ResourceStoreChooser = ({\n  options,\n  onChooseResources,\n  createNewResource,\n}: ResourceStoreChooserProps) => {\n  return (\n    <ResourceStore\n      onChoose={resource => {\n        const chosenResourceUrl = resource.url;\n        const newResource = createNewResource();\n        newResource.setFile(chosenResourceUrl);\n        newResource.setName(path.basename(chosenResourceUrl));\n        newResource.setOrigin('gdevelop-asset-store', chosenResourceUrl);\n\n        onChooseResources([newResource]);\n      }}\n      resourceKind={options.resourceKind}\n    />\n  );\n};\n\nconst localResourceSources: Array<ResourceSource> = [\n  // Have the local resource sources first, so they are used by default/shown first when\n  // the project is saved locally.\n  ...allResourceKindsAndMetadata.map(\n    ({ kind, displayName, fileExtensions, createNewResource }) => {\n      const selectLocalFileResources = async ({\n        i18n,\n        getLastUsedPath,\n        setLastUsedPath,\n        project,\n        options,\n      }: ChooseResourceProps) => {\n        if (!dialog)\n          throw new Error('Electron dialog not supported in this environment.');\n\n        const properties = ['openFile'];\n        if (options.multiSelection) properties.push('multiSelections');\n\n        const projectPath = path.dirname(project.getProjectFile());\n        const latestPath = getLastUsedPath(project, kind) || projectPath;\n\n        const browserWindow = remote.getCurrentWindow();\n        let { filePaths } = await dialog.showOpenDialog(browserWindow, {\n          title: i18n._(t`Choose a file`),\n          properties,\n          filters: [\n            { name: i18n._(t`Supported files`), extensions: fileExtensions },\n          ],\n          defaultPath: latestPath,\n        });\n        if (!filePaths || !filePaths.length) return [];\n\n        const lastUsedPath = path.parse(filePaths[0]).dir;\n        setLastUsedPath(project, kind, lastUsedPath);\n\n        let hasFilesOutsideProjectFolder = filePaths.some(\n          path => !isPathInProjectFolder(project, path)\n        );\n\n        // Some resources, like tilemaps, can have references to other files.\n        // We parse these files, optionally copy them, then create a mapping from the previous file name\n        // as written inside the tilemap to the name of the resource that is representing this file.\n        const filesWithEmbeddedResources = new Map<string, EmbeddedResources>();\n        const parseEmbeddedResources = embeddedResourcesParsers[kind];\n        if (parseEmbeddedResources) {\n          for (const filePath of filePaths) {\n            const embeddedResources = await parseEmbeddedResources(\n              project,\n              filePath\n            );\n\n            if (embeddedResources) {\n              filesWithEmbeddedResources.set(filePath, embeddedResources);\n\n              if (embeddedResources.hasAnyEmbeddedResourceOutsideProjectFolder)\n                hasFilesOutsideProjectFolder = true;\n            }\n          }\n        }\n\n        // Check if files should be copied in the project folder.\n        const newToOldFilePaths = new Map<string, string>();\n        let filesWithMappedResources = new Map<string, MappedResources>();\n        if (hasFilesOutsideProjectFolder) {\n          const answer = Window.showConfirmDialog(\n            i18n._(\n              t`This/these file(s) are outside the project folder. Would you like to make a copy of them in your project folder first (recommended)?`\n            )\n          );\n\n          if (answer) {\n            filePaths = await copyAllToProjectFolder(\n              project,\n              filePaths,\n              newToOldFilePaths\n            );\n\n            await copyAllEmbeddedResourcesToProjectFolder(\n              project,\n              filesWithEmbeddedResources\n            );\n          }\n        }\n\n        // In case of resources embedded inside others,\n        // create a mapping from the file name\n        // as written inside the resource (e.g: the tilemap)\n        // to the name of the resource that was created to\n        // represent this file.\n        filesWithMappedResources = createAndMapEmbeddedResources(\n          project,\n          filesWithEmbeddedResources\n        );\n\n        return filePaths.map(filePath => {\n          const newResource = createNewResource();\n          newResource.setFile(path.relative(projectPath, filePath));\n          newResource.setName(path.relative(projectPath, filePath));\n\n          const filePathWithMapping = newToOldFilePaths.has(filePath)\n            ? newToOldFilePaths.get(filePath)\n            : filePath;\n          if (filePathWithMapping) {\n            const mappedResources = filesWithMappedResources.get(\n              filePathWithMapping\n            );\n\n            if (mappedResources && mappedResources.mapping) {\n              newResource.setMetadata(\n                JSON.stringify({\n                  embeddedResourcesMapping: mappedResources.mapping,\n                })\n              );\n            }\n          }\n\n          return newResource;\n        });\n      };\n\n      return {\n        name: 'local-file-opener-' + kind,\n        displayName: t`Choose a file`,\n        displayTab: 'import',\n        onlyForStorageProvider: 'LocalFile',\n        kind,\n        selectResourcesHeadless: selectLocalFileResources,\n        renderComponent: (props: ResourceSourceComponentProps) => (\n          <Line justifyContent=\"center\">\n            <RaisedButton\n              primary\n              label={\n                props.options.multiSelection ? (\n                  <Trans>Choose one or more files</Trans>\n                ) : (\n                  <Trans>Choose a file</Trans>\n                )\n              }\n              onClick={async () => {\n                const resources = await selectLocalFileResources({\n                  i18n: props.i18n,\n                  project: props.project,\n                  fileMetadata: props.fileMetadata,\n                  getStorageProvider: props.getStorageProvider,\n                  getLastUsedPath: props.getLastUsedPath,\n                  setLastUsedPath: props.setLastUsedPath,\n                  options: props.options,\n                });\n\n                props.onChooseResources(resources);\n              }}\n            />\n          </Line>\n        ),\n      };\n    }\n  ),\n  ...allResourceKindsAndMetadata.map(({ kind, createNewResource }) => ({\n    name: `upload-${kind}`,\n    displayName: t`File(s) from your device`,\n    displayTab: 'import',\n    onlyForStorageProvider: 'Cloud',\n    kind,\n    renderComponent: (props: ResourceSourceComponentProps) => (\n      <FileToCloudProjectResourceUploader\n        createNewResource={createNewResource}\n        onChooseResources={props.onChooseResources}\n        options={props.options}\n        fileMetadata={props.fileMetadata}\n        getStorageProvider={props.getStorageProvider}\n        key={`url-chooser-${kind}`}\n        automaticallyOpenInput={!!props.automaticallyOpenIfPossible}\n      />\n    ),\n  })),\n  ...allResourceKindsAndMetadata.map(({ kind, createNewResource }) => ({\n    name: `resource-store-${kind}`,\n    displayName: t`Choose from asset store`,\n    displayTab: 'standalone',\n    kind,\n    renderComponent: (props: ResourceSourceComponentProps) => (\n      <ResourceStoreChooser\n        createNewResource={createNewResource}\n        onChooseResources={props.onChooseResources}\n        options={props.options}\n        key={`resource-store-${kind}`}\n      />\n    ),\n  })),\n];\n\nexport default localResourceSources;\n","// @flow\nimport React from 'react';\nimport MainFrame from './MainFrame';\nimport Window from './Utils/Window';\nimport ExportDialog from './Export/ExportDialog';\nimport Authentication from './Utils/GDevelopServices/Authentication';\nimport './UI/icomoon-font.css'; // Styles for Icomoon font.\n\n// Import for Electron powered IDE.\nimport localResourceSources from './ResourcesList/LocalResourceSources';\nimport localResourceExternalEditors from './ResourcesList/LocalResourceExternalEditors';\nimport LocalPreviewLauncher from './Export/LocalExporters/LocalPreviewLauncher';\nimport {\n  localAutomatedExporters,\n  localManualExporters,\n  localOnlineWebExporter,\n} from './Export/LocalExporters';\nimport ElectronMainMenu from './MainFrame/ElectronMainMenu';\nimport makeExtensionsLoader from './JsExtensionsLoader/LocalJsExtensionsLoader';\nimport { makeLocalEventsFunctionCodeWriter } from './EventsFunctionsExtensionsLoader/CodeWriters/LocalEventsFunctionCodeWriter';\nimport ObjectsEditorService from './ObjectEditor/ObjectsEditorService';\nimport ObjectsRenderingService from './ObjectsRendering/ObjectsRenderingService';\nimport Providers from './MainFrame/Providers';\nimport LocalEventsFunctionsExtensionWriter from './EventsFunctionsExtensionsLoader/Storage/LocalEventsFunctionsExtensionWriter';\nimport LocalEventsFunctionsExtensionOpener from './EventsFunctionsExtensionsLoader/Storage/LocalEventsFunctionsExtensionOpener';\nimport ProjectStorageProviders from './ProjectsStorage/ProjectStorageProviders';\nimport LocalFileStorageProvider from './ProjectsStorage/LocalFileStorageProvider';\nimport { LocalGDJSDevelopmentWatcher } from './GameEngineFinder/LocalGDJSDevelopmentWatcher';\nimport CloudStorageProvider from './ProjectsStorage/CloudStorageProvider';\nimport UrlStorageProvider from './ProjectsStorage/UrlStorageProvider';\nimport LocalResourceMover from './ProjectsStorage/ResourceMover/LocalResourceMover';\nimport LocalResourceFetcher from './ProjectsStorage/ResourceFetcher/LocalResourceFetcher';\n\nconst gd: libGDevelop = global.gd;\n\nexport const create = (authentication: Authentication) => {\n  Window.setUpContextMenu();\n\n  const appArguments = Window.getArguments();\n  const isDev = Window.isDev();\n\n  return (\n    <Providers\n      authentication={authentication}\n      disableCheckForUpdates={!!appArguments['disable-update-check']}\n      makeEventsFunctionCodeWriter={makeLocalEventsFunctionCodeWriter}\n      eventsFunctionsExtensionWriter={LocalEventsFunctionsExtensionWriter}\n      eventsFunctionsExtensionOpener={LocalEventsFunctionsExtensionOpener}\n    >\n      {({ i18n }) => (\n        <ProjectStorageProviders\n          appArguments={appArguments}\n          storageProviders={[\n            LocalFileStorageProvider,\n            UrlStorageProvider,\n            CloudStorageProvider,\n          ]}\n          defaultStorageProvider={LocalFileStorageProvider}\n        >\n          {({\n            getStorageProviderOperations,\n            storageProviders,\n            initialFileMetadataToOpen,\n            getStorageProvider,\n          }) => (\n            <MainFrame\n              i18n={i18n}\n              renderMainMenu={(props, callbacks) => (\n                <ElectronMainMenu props={props} callbacks={callbacks} />\n              )}\n              renderPreviewLauncher={(props, ref) => (\n                <LocalPreviewLauncher {...props} ref={ref} />\n              )}\n              renderExportDialog={props => (\n                <ExportDialog\n                  project={props.project}\n                  onSaveProject={props.onSaveProject}\n                  onChangeSubscription={props.onChangeSubscription}\n                  onClose={props.onClose}\n                  automatedExporters={localAutomatedExporters}\n                  manualExporters={localManualExporters}\n                  onlineWebExporter={localOnlineWebExporter}\n                />\n              )}\n              renderGDJSDevelopmentWatcher={\n                isDev ? () => <LocalGDJSDevelopmentWatcher /> : null\n              }\n              storageProviders={storageProviders}\n              resourceMover={LocalResourceMover}\n              resourceFetcher={LocalResourceFetcher}\n              getStorageProviderOperations={getStorageProviderOperations}\n              getStorageProvider={getStorageProvider}\n              resourceSources={localResourceSources}\n              resourceExternalEditors={localResourceExternalEditors}\n              extensionsLoader={makeExtensionsLoader({\n                gd,\n                objectsEditorService: ObjectsEditorService,\n                objectsRenderingService: ObjectsRenderingService,\n                filterExamples: !isDev,\n              })}\n              initialFileMetadataToOpen={initialFileMetadataToOpen}\n            />\n          )}\n        </ProjectStorageProviders>\n      )}\n    </Providers>\n  );\n};\n","// @flow\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport { getUID } from '../../Utils/LocalUserInfo';\nimport { isURL } from '../../ResourcesList/ResourceUtils';\nconst fs = optionalRequire('fs-extra');\nconst path = optionalRequire('path');\nconst os = optionalRequire('os');\n\nconst gd: libGDevelop = global.gd;\n\nexport type UrlFileDescriptor = {|\n  filePath: string,\n  url: string,\n|};\n\n// For some reason, `path.posix` is undefined when packaged\n// with webpack, so we're using `path` directly. As it's for the web-app,\n// it should always be the posix version. In tests on Windows,\n// it's necessary to use path.posix.\n// Search for \"pathPosix\" in the codebase for other places where this is used.\nconst pathPosix = path.posix || path;\n\n/**\n * Gives access to the local filesystem, but returns paths\n * that are using \"/\" as a path separator, even on Windows\n * (so that in exported games, paths are slashs, which is\n * supported everywhere).\n */\nclass LocalFileSystem {\n  /**\n   * True if URLs should be downloaded (useful for an export, but not for a preview).\n   * @private\n   */\n  _downloadUrlsToLocalFiles: boolean;\n\n  /**\n   * Store all the files that should be downloaded (filepath => url)\n   * @private\n   */\n  _filesToDownload: { [string]: string } = {};\n\n  constructor(\n    options: ?{|\n      downloadUrlsToLocalFiles: boolean,\n    |}\n  ) {\n    this._downloadUrlsToLocalFiles =\n      !!options && options.downloadUrlsToLocalFiles;\n  }\n\n  /**\n   * Returns all the files that should be downloaded from a URL, with the specified destination path prefix.\n   */\n  getAllUrlFilesIn = (pathPrefix: string): Array<UrlFileDescriptor> => {\n    // Ensure the path prefix we're searching the files in is normalized,\n    // because everything that we stored was normalized. If we don't do this,\n    // we risk missing files on Windows (as pathPrefix can contain backslashes).\n    const normalizedPathPrefix = pathPosix\n      .normalize(pathPrefix)\n      .replace(/\\\\/g, '/');\n\n    return Object.keys(this._filesToDownload)\n      .filter(filePath => filePath.indexOf(normalizedPathPrefix) === 0)\n      .map(filePath => ({\n        filePath,\n        url: this._filesToDownload[filePath],\n      }));\n  };\n\n  mkDir = (path: string) => {\n    if (isURL(path)) {\n      // URLs are always assumed to exist.\n      return;\n    }\n\n    try {\n      fs.mkdirsSync(path);\n    } catch (e) {\n      console.error('mkDir(' + path + ') failed: ' + e);\n      return false;\n    }\n    return true;\n  };\n  dirExists = (path: string) => {\n    if (isURL(path)) {\n      // URLs are always assumed to exist.\n      return true;\n    }\n\n    return fs.existsSync(path);\n  };\n  clearDir = (path: string) => {\n    try {\n      fs.emptyDirSync(path);\n    } catch (e) {\n      console.error('clearDir(' + path + ') failed: ' + e);\n    }\n  };\n  getTempDir = () => {\n    return path.join(os.tmpdir(), `GDTMP-${getUID()}`);\n  };\n  fileNameFrom = (fullPath: string) => {\n    // If URLs are not downloaded, then filenames are not changed.\n    if (!this._downloadUrlsToLocalFiles && isURL(fullPath)) return fullPath;\n\n    return path.basename(fullPath);\n  };\n  dirNameFrom = (fullPath: string) => {\n    return path.dirname(fullPath).replace(/\\\\/g, '/');\n  };\n  makeAbsolute = (filename: string, baseDirectory: string) => {\n    if (isURL(filename)) return filename;\n\n    if (!this.isAbsolute(baseDirectory))\n      baseDirectory = path.resolve(baseDirectory);\n\n    return path\n      .resolve(baseDirectory, path.normalize(filename))\n      .replace(/\\\\/g, '/');\n  };\n  makeRelative = (filename: string, baseDirectory: string) => {\n    if (isURL(filename)) return filename;\n\n    return path\n      .relative(baseDirectory, path.normalize(filename))\n      .replace(/\\\\/g, '/');\n  };\n  isAbsolute = (fullPath: string) => {\n    if (isURL(fullPath)) return true;\n\n    if (fullPath.length === 0) return true;\n    return (\n      (fullPath.length > 0 && fullPath.charAt(0) === '/') ||\n      (fullPath.length > 1 && fullPath.charAt(1) === ':')\n    );\n  };\n  copyFile = (source: string, dest: string) => {\n    if (isURL(source)) {\n      // If URLs are not downloaded, then there is nothing to copy.\n      if (!this._downloadUrlsToLocalFiles) return true;\n\n      if (isURL(dest)) {\n        console.error(\n          `Destination can't be a URL in copyFile (from ${source} to ${dest}).`\n        );\n        return false;\n      }\n\n      this._filesToDownload[pathPosix.normalize(dest)] = source;\n      return true;\n    }\n\n    try {\n      if (source !== dest) fs.copySync(source, dest);\n    } catch (e) {\n      console.error('copyFile(' + source + ', ' + dest + ') failed: ' + e);\n      return false;\n    }\n    return true;\n  };\n  writeToFile = (file: string, contents: string) => {\n    try {\n      fs.outputFileSync(file, contents);\n    } catch (e) {\n      console.error('writeToFile(' + file + ', ...) failed: ' + e);\n      return false;\n    }\n    return true;\n  };\n  readFile = (file: string) => {\n    try {\n      var contents = fs.readFileSync(file);\n      return contents.toString();\n    } catch (e) {\n      console.error('readFile(' + file + ') failed: ' + e);\n      return '';\n    }\n  };\n  readDir = (path: string, ext: string) => {\n    ext = ext.toUpperCase();\n    var output = new gd.VectorString();\n    try {\n      var files = [];\n      if (fs.existsSync(path)) {\n        files = fs.readdirSync(path);\n        files.forEach(function(file) {\n          if (\n            ext.length === 0 ||\n            file.toUpperCase().indexOf(ext, file.length - ext.length) !== -1\n          ) {\n            output.push_back(path + '/' + file);\n          }\n        });\n      }\n    } catch (e) {\n      console.error('readDir(' + path + ',' + ext + ') failed: ' + e);\n    }\n\n    return output;\n  };\n  fileExists = (filePath: string) => {\n    // Check if a file WILL exists once downloaded.\n    const normalizedFilePath = pathPosix.normalize(filePath);\n    const shouldTheFileBeDownloaded = !!this._filesToDownload[\n      normalizedFilePath\n    ];\n    if (shouldTheFileBeDownloaded) {\n      return true;\n    }\n\n    // Check if a local file exists.\n    try {\n      const stat = fs.statSync(filePath);\n      return stat.isFile();\n    } catch (e) {\n      return false;\n    }\n  };\n}\n\nexport default LocalFileSystem;\n","// @flow\r\nimport PromisePool from '@supercharge/promise-pool';\r\nimport { retryIfFailed } from './RetryIfFailed';\r\nimport optionalRequire from './OptionalRequire';\r\nconst electron = optionalRequire('electron');\r\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\r\n\r\ntype Input<Item> = {|\r\n  urlContainers: Array<Item>,\r\n  onProgress: (count: number, total: number) => void,\r\n  throwIfAnyError: boolean,\r\n|};\r\n\r\nexport type ItemResult<Item> = {|\r\n  item: Item,\r\n  error?: Error,\r\n|};\r\n\r\nexport const downloadUrlsToLocalFiles = async <\r\n  Item: { url: string, filePath: string }\r\n>({\r\n  urlContainers,\r\n  onProgress,\r\n  throwIfAnyError,\r\n}: Input<Item>): Promise<Array<ItemResult<Item>>> => {\r\n  let count = 0;\r\n  let firstError = null;\r\n  if (!ipcRenderer)\r\n    throw new Error('Download to local files is not supported.');\r\n\r\n  const { results } = await PromisePool.withConcurrency(20)\r\n    .for(urlContainers)\r\n    .process<ItemResult<Item>>(async urlContainer => {\r\n      const { url, filePath } = urlContainer;\r\n\r\n      try {\r\n        await retryIfFailed({ times: 2 }, async () => {\r\n          await ipcRenderer.invoke('local-file-download', url, filePath);\r\n        });\r\n\r\n        const result: ItemResult<Item> = {\r\n          item: urlContainer,\r\n        };\r\n        return result;\r\n      } catch (error) {\r\n        firstError = error;\r\n        const result: ItemResult<Item> = {\r\n          item: urlContainer,\r\n          error,\r\n        };\r\n        return result;\r\n      } finally {\r\n        onProgress(count++, urlContainers.length);\r\n      }\r\n    });\r\n\r\n  if (throwIfAnyError && firstError) {\r\n    throw firstError;\r\n  }\r\n\r\n  return results;\r\n};\r\n","// @flow\n\nimport optionalRequire from './OptionalRequire';\nimport optionalLazyRequire from '../Utils/OptionalLazyRequire';\nconst fs = optionalRequire('fs');\nconst lazyRequireArchiver = optionalLazyRequire('archiver');\n\n// TODO: Move in a Archiver folder?\n/**\n * Archive the given folder to a file. Only available when running on Electron runtime.\n */\nexport const archiveLocalFolder = ({\n  path,\n  outputFilename,\n  sizeLimit,\n}: {|\n  path: string,\n  outputFilename: string,\n  sizeLimit?: number,\n|}): Promise<string> => {\n  const archiver = lazyRequireArchiver();\n  return new Promise((resolve, reject) => {\n    if (!fs || !archiver) return reject(new Error('Archiver unavailable'));\n\n    const output = fs.createWriteStream(outputFilename);\n    const archive = archiver('zip', {\n      zlib: { level: 9 }, // Sets the compression level.\n    });\n\n    output.on('close', () => {\n      const fileSize = archive.pointer();\n      console.log(\n        `Archive written at ${outputFilename}, ${fileSize} total bytes.`\n      );\n      if (sizeLimit && fileSize > sizeLimit) {\n        const roundFileSizeInMb = Math.round(fileSize / (1000 * 1000));\n        reject(\n          new Error(\n            `Archive is of size ${roundFileSizeInMb} MB, which is above the limit allowed of ${sizeLimit /\n              (1000 * 1000)} MB.`\n          )\n        );\n      }\n      resolve(outputFilename);\n    });\n\n    archive.on('error', err => {\n      reject(err);\n    });\n\n    archive.pipe(output);\n\n    archive.directory(path, false);\n\n    archive.finalize();\n  });\n};\n","// @flow\nimport optionalRequire from '../../Utils/OptionalRequire';\nconst electron = optionalRequire('electron');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\n\ntype UploadOptions = {\n  signedUrl: string,\n  contentType: string,\n};\n\nexport const uploadLocalFile = (\n  localFilePath: string,\n  uploadOptions: UploadOptions,\n  onProgress: (progress: number, total: number) => void\n): Promise<void> => {\n  if (!ipcRenderer) return Promise.reject('No support for local file upload');\n\n  ipcRenderer.removeAllListeners('local-file-upload-progress');\n  ipcRenderer.removeAllListeners('local-file-upload-done');\n\n  return new Promise((resolve, reject) => {\n    ipcRenderer.on(\n      'local-file-upload-progress',\n      (event, stepCurrentProgress, stepMaxProgress) => {\n        onProgress(stepCurrentProgress, stepMaxProgress);\n      }\n    );\n    ipcRenderer.on('local-file-upload-done', (event, err) => {\n      if (err) return reject(err);\n      resolve();\n    });\n    ipcRenderer.send('local-file-upload', localFilePath, uploadOptions);\n  });\n};\n","// @flow\n// TODO: This module could be published on npm if useful.\nimport newNameGenerator from './NewNameGenerator';\nimport slugs from 'slugs';\n\ntype PartialObjectDescription = {|\n  reference: string,\n  object: Object,\n|};\n\ntype Reference = {\n  referenceTo: string,\n};\n\ntype SplitConfiguration = {|\n  pathSeparator: string,\n  getArrayItemReferenceName: (\n    object: Object,\n    currentReference: string\n  ) => string,\n  shouldSplit: (path: string) => boolean,\n  isReferenceMagicPropertyName: string,\n|};\n\ntype UnsplitConfiguration = {|\n  isReferenceMagicPropertyName: string,\n  getReferencePartialObject: (referencePath: string) => Promise<Object>,\n  maxUnsplitDepth?: number,\n|};\n\n/**\n * Mutate the given object to split it into multiple partial objects.\n * Partial objects will be replaced by references.\n *\n * @param object The object to be split.\n * @param configuration Configuration to be used to split the object.\n */\nexport const split = (\n  object: Object,\n  {\n    pathSeparator,\n    getArrayItemReferenceName,\n    shouldSplit,\n    isReferenceMagicPropertyName,\n  }: SplitConfiguration\n): Array<PartialObjectDescription> => {\n  const partialObjects = [];\n  const createReference = (reference, object): Reference => {\n    partialObjects.push({\n      reference,\n      object,\n    });\n\n    return {\n      [isReferenceMagicPropertyName]: true,\n      referenceTo: reference,\n    };\n  };\n\n  const splitObject = (\n    currentObject: Object,\n    currentPath: string,\n    currentReference: string\n  ) => {\n    if (currentObject !== null && typeof currentObject === 'object') {\n      if (Array.isArray(currentObject)) {\n        for (let index in currentObject) {\n          const itemPath = currentPath + pathSeparator + '*';\n          if (shouldSplit(itemPath)) {\n            const partialObject = currentObject[index];\n            const name = getArrayItemReferenceName(\n              partialObject,\n              currentReference\n            );\n            const itemReference = currentReference + pathSeparator + name;\n\n            currentObject[index] = createReference(\n              itemReference,\n              partialObject\n            );\n\n            splitObject(partialObject, itemPath, itemReference);\n          } else {\n            const itemReference = currentReference + pathSeparator + index;\n\n            splitObject(currentObject[index], itemPath, itemReference);\n          }\n        }\n      } else {\n        for (let propertyName in currentObject) {\n          const propertyPath = currentPath + pathSeparator + propertyName;\n          const propertyReference =\n            currentReference + pathSeparator + propertyName;\n          if (shouldSplit(propertyPath)) {\n            const partialObject = currentObject[propertyName];\n\n            currentObject[propertyName] = createReference(\n              propertyReference,\n              partialObject\n            );\n\n            splitObject(partialObject, propertyPath, propertyReference);\n          } else {\n            splitObject(\n              currentObject[propertyName],\n              propertyPath,\n              propertyReference\n            );\n          }\n        }\n      }\n    }\n  };\n\n  splitObject(object, '', '');\n  return partialObjects;\n};\n\n/**\n * Mutate the given object to recompose it from partial objects.\n * References to partial objects will be fetched as needed.\n *\n * @param object The object to be unsplit.\n * @param configuration Configuration to be used to unsplit the object.\n */\nexport const unsplit = (\n  object: Object,\n  {\n    isReferenceMagicPropertyName,\n    getReferencePartialObject,\n    maxUnsplitDepth,\n  }: UnsplitConfiguration\n): Promise<void> => {\n  const isReference = (object: Object): ?Reference => {\n    if (object[isReferenceMagicPropertyName] === true) {\n      return object;\n    }\n\n    return null;\n  };\n\n  const unsplitObject = (\n    currentObject: Object,\n    depth: number\n  ): Promise<void> => {\n    if (maxUnsplitDepth !== undefined && depth >= maxUnsplitDepth) {\n      return Promise.resolve();\n    }\n\n    if (currentObject !== null && typeof currentObject === 'object') {\n      const keys = Object.keys(currentObject);\n      if (keys) {\n        return Promise.all(\n          keys.map(indexOrPropertyName => {\n            const reference = isReference(currentObject[indexOrPropertyName]);\n            if (reference) {\n              return getReferencePartialObject(reference.referenceTo).then(\n                partialObject => {\n                  currentObject[indexOrPropertyName] = partialObject;\n\n                  return unsplitObject(\n                    currentObject[indexOrPropertyName],\n                    depth + 1\n                  );\n                }\n              );\n            }\n\n            return unsplitObject(currentObject[indexOrPropertyName], depth + 1);\n          })\n        ).then(() => {});\n      }\n    }\n\n    return Promise.resolve();\n  };\n\n  return unsplitObject(object, 0);\n};\n\n/**\n * A helper that can be used to split according to a list of hardcoded paths\n */\nexport const splitPaths = (paths: Set<string>) => {\n  return (path: string) => paths.has(path);\n};\n\n/**\n * A helper that can be used to get the name of items in array using an hardcoded property name.\n */\nexport const getNameFromProperty = (propertyName: string) => {\n  return (object: Object): string => {\n    const property = object[propertyName];\n    if (typeof property !== 'string') {\n      throw new Error(`Property ${propertyName} is not a string`);\n    }\n\n    return property;\n  };\n};\n\n/**\n * A helper that can be used to get the name of items in array using an hardcoded property name.\n */\nexport const getSlugifiedUniqueNameFromProperty = (propertyName: string) => {\n  const existingNamesForReference = {};\n\n  return (object: Object, currentReference: string): string => {\n    const property = object[propertyName];\n    if (typeof property !== 'string') {\n      throw new Error(`Property ${propertyName} is not a string`);\n    }\n\n    existingNamesForReference[currentReference] =\n      existingNamesForReference[currentReference] || {};\n    const newName = newNameGenerator(\n      slugs(property),\n      name => !!existingNamesForReference[currentReference][name]\n    );\n    existingNamesForReference[currentReference][newName] = true;\n    return newName;\n  };\n};\n","// @flow\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport { type FileMetadata } from '../index';\nimport { unsplit } from '../../Utils/ObjectSplitter';\nconst fs = optionalRequire('fs');\nconst path = optionalRequire('path');\nconst remote = optionalRequire('@electron/remote');\nconst dialog = remote ? remote.dialog : null;\n\nconst readJSONFile = (filepath: string): Promise<Object> => {\n  if (!fs) return Promise.reject('Filesystem is not supported.');\n\n  return new Promise((resolve, reject) => {\n    fs.readFile(filepath, { encoding: 'utf8' }, (err, data) => {\n      if (err) return reject(err);\n\n      try {\n        const dataObject = JSON.parse(data);\n        return resolve(dataObject);\n      } catch (ex) {\n        return reject(filepath + ' is a corrupted/malformed file.');\n      }\n    });\n  });\n};\n\nexport const onOpenWithPicker = (): Promise<?FileMetadata> => {\n  if (!dialog) return Promise.reject('Not supported');\n  const browserWindow = remote.getCurrentWindow();\n\n  return dialog\n    .showOpenDialog(browserWindow, {\n      title: 'Open a project',\n      properties: ['openFile'],\n      message:\n        'If you want to open your GDevelop 4 project, be sure to save it as a .json file',\n      filters: [{ name: 'GDevelop 5 project', extensions: ['json'] }],\n    })\n    .then(({ filePaths }) => {\n      if (!filePaths || !filePaths.length) return null;\n      return { fileIdentifier: filePaths[0] };\n    });\n};\n\nexport const onOpen = (\n  fileMetadata: FileMetadata\n): Promise<{|\n  content: Object,\n|}> => {\n  const filePath = fileMetadata.fileIdentifier;\n  const projectPath = path.dirname(filePath);\n  return readJSONFile(filePath).then(object => {\n    return unsplit(object, {\n      getReferencePartialObject: referencePath => {\n        return readJSONFile(path.join(projectPath, referencePath) + '.json');\n      },\n      isReferenceMagicPropertyName: '__REFERENCE_TO_SPLIT_OBJECT',\n      // Limit unsplitting to depth 3 (which would allow properties of layouts/external layouts/external events\n      // to be un-splitted, but not the content of these properties), to avoid very slow processing\n      // of large game files.\n      maxUnsplitDepth: 3,\n    }).then(() => {\n      return { content: object };\n    });\n  });\n};\n\nexport const hasAutoSave = async (\n  fileMetadata: FileMetadata,\n  compareLastModified: boolean\n): Promise<boolean> => {\n  const filePath = fileMetadata.fileIdentifier;\n  const autoSavePath = filePath + '.autosave';\n  if (fs.existsSync(autoSavePath)) {\n    if (!compareLastModified) {\n      return true;\n    }\n    try {\n      const autoSavedTime = fs.statSync(autoSavePath).mtime.getTime();\n      const saveTime = fs.statSync(filePath).mtime.getTime();\n      // When comparing the last modified time, add a 5 seconds margin to avoid\n      // showing the warning if the user has just saved the project, or if the\n      // project has been decompressed from a zip file, causing the last modified\n      // time to be the time of decompression.\n      if (autoSavedTime > saveTime + 5000) {\n        return true;\n      }\n    } catch (err) {\n      console.error('Unable to compare *.autosave to project', err);\n      return false;\n    }\n    return false;\n  }\n  return false;\n};\n\nexport const onGetAutoSave = (fileMetadata: FileMetadata) => {\n  return Promise.resolve({\n    ...fileMetadata,\n    fileIdentifier: fileMetadata.fileIdentifier + '.autosave',\n  });\n};\n","// @flow\nimport { t } from '@lingui/macro';\nimport * as React from 'react';\nimport { serializeToJSObject, serializeToJSON } from '../../Utils/Serializer';\nimport { type FileMetadata, type SaveAsLocation } from '../index';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport {\n  split,\n  splitPaths,\n  getSlugifiedUniqueNameFromProperty,\n} from '../../Utils/ObjectSplitter';\nimport type { MessageDescriptor } from '../../Utils/i18n/MessageDescriptor.flow';\nimport LocalFolderPicker from '../../UI/LocalFolderPicker';\n\nconst fs = optionalRequire('fs-extra');\nconst path = optionalRequire('path');\nconst remote = optionalRequire('@electron/remote');\nconst dialog = remote ? remote.dialog : null;\n\nconst checkFileContent = (filePath: string, expectedContent: string) => {\n  const time = performance.now();\n  return new Promise((resolve, reject) => {\n    fs.readFile(filePath, { encoding: 'utf8' }, (err, content) => {\n      if (err) return reject(err);\n\n      if (content === '') {\n        reject(new Error(`Written file is empty, did the write fail?`));\n      }\n      if (content !== expectedContent) {\n        reject(\n          new Error(\n            `Written file is not containing the expected content, did the write fail?`\n          )\n        );\n      }\n      const verificationTime = performance.now() - time;\n      console.info(\n        `Verified ${filePath} content in ${verificationTime.toFixed()}ms.`\n      );\n      resolve();\n    });\n  });\n};\n\nexport const writeAndCheckFile = async (\n  content: string,\n  filePath: string\n): Promise<void> => {\n  if (!fs) throw new Error('Filesystem is not supported.');\n  if (content === '')\n    throw new Error('The content to save on disk is empty. Aborting.');\n\n  await fs.ensureDir(path.dirname(filePath));\n\n  await fs.writeFile(filePath, content);\n  await checkFileContent(filePath, content);\n};\n\nconst writeAndCheckFormattedJSONFile = async (\n  object: Object,\n  filePath: string\n): Promise<void> => {\n  const content = JSON.stringify(object, null, 2);\n  await writeAndCheckFile(content, filePath);\n};\n\nconst writeProjectFiles = (\n  project: gdProject,\n  filePath: string,\n  projectPath: string\n): Promise<void> => {\n  const serializedProjectObject = serializeToJSObject(project);\n  if (project.isFolderProject()) {\n    const partialObjects = split(serializedProjectObject, {\n      pathSeparator: '/',\n      getArrayItemReferenceName: getSlugifiedUniqueNameFromProperty('name'),\n      shouldSplit: splitPaths(\n        new Set([\n          '/layouts/*',\n          '/externalLayouts/*',\n          '/externalEvents/*',\n          '/layouts/*',\n          '/eventsFunctionsExtensions/*',\n        ])\n      ),\n      isReferenceMagicPropertyName: '__REFERENCE_TO_SPLIT_OBJECT',\n    });\n\n    return Promise.all(\n      partialObjects.map(partialObject => {\n        return writeAndCheckFormattedJSONFile(\n          partialObject.object,\n          path.join(projectPath, partialObject.reference) + '.json'\n        ).catch(err => {\n          console.error('Unable to write a partial file:', err);\n          throw err;\n        });\n      })\n    ).then(() => {\n      return writeAndCheckFormattedJSONFile(\n        serializedProjectObject,\n        filePath\n      ).catch(err => {\n        console.error('Unable to write the split project:', err);\n        throw err;\n      });\n    });\n  } else {\n    return writeAndCheckFormattedJSONFile(\n      serializedProjectObject,\n      filePath\n    ).catch(err => {\n      console.error('Unable to write the project:', err);\n      throw err;\n    });\n  }\n};\n\nexport const onSaveProject = (\n  project: gdProject,\n  fileMetadata: FileMetadata\n): Promise<{|\n  wasSaved: boolean,\n  fileMetadata: FileMetadata,\n|}> => {\n  const filePath = fileMetadata.fileIdentifier;\n  const now = Date.now();\n  if (!filePath) {\n    return Promise.reject(\n      'Project file is empty, \"Save as\" should have been called?'\n    );\n  }\n  // Ensure we always pick the latest name and gameId.\n  const newFileMetadata = {\n    ...fileMetadata,\n    name: project.getName(),\n    gameId: project.getProjectUuid(),\n    lastModifiedDate: now,\n  };\n\n  const projectPath = path.dirname(filePath);\n  return writeProjectFiles(project, filePath, projectPath).then(() => {\n    return { wasSaved: true, fileMetadata: newFileMetadata }; // Save was properly done\n  });\n};\n\nexport const onChooseSaveProjectAsLocation = async ({\n  project,\n  fileMetadata,\n}: {|\n  project: gdProject,\n  fileMetadata: ?FileMetadata, // This is the current location.\n|}): Promise<{|\n  saveAsLocation: ?SaveAsLocation, // This is the newly chosen location (or null if cancelled).\n|}> => {\n  const defaultPath = fileMetadata ? fileMetadata.fileIdentifier : '';\n  const browserWindow = remote.getCurrentWindow();\n  const saveDialogOptions = {\n    defaultPath,\n    filters: [{ name: 'GDevelop 5 project', extensions: ['json'] }],\n  };\n\n  if (!dialog) {\n    throw new Error('Unsupported');\n  }\n  const filePath = dialog.showSaveDialogSync(browserWindow, saveDialogOptions);\n  if (!filePath) {\n    return { saveAsLocation: null };\n  }\n\n  return {\n    saveAsLocation: {\n      fileIdentifier: filePath,\n    },\n  };\n};\n\nexport const onSaveProjectAs = async (\n  project: gdProject,\n  saveAsLocation: ?SaveAsLocation,\n  options: {|\n    onStartSaving: () => void,\n    onMoveResources: ({|\n      newFileMetadata: FileMetadata,\n    |}) => Promise<void>,\n  |}\n): Promise<{|\n  wasSaved: boolean,\n  fileMetadata: ?FileMetadata,\n|}> => {\n  if (!saveAsLocation)\n    throw new Error('A location was not chosen before saving as.');\n  const filePath = saveAsLocation.fileIdentifier;\n  if (!filePath)\n    throw new Error('A file path was not chosen before saving as.');\n\n  options.onStartSaving();\n  // Ensure we always pick the latest name and gameId.\n  const newFileMetadata = {\n    fileIdentifier: filePath,\n    name: project.getName(),\n    gameId: project.getProjectUuid(),\n    lastModifiedDate: Date.now(),\n  };\n\n  // Move (copy or download, etc...) the resources first.\n  await options.onMoveResources({ newFileMetadata });\n\n  // Save the project when resources have been copied.\n  const projectPath = path.dirname(filePath);\n  project.setProjectFile(filePath);\n\n  await writeProjectFiles(project, filePath, projectPath);\n  return {\n    wasSaved: true,\n    fileMetadata: newFileMetadata,\n  };\n};\n\nexport const onAutoSaveProject = (\n  project: gdProject,\n  fileMetadata: FileMetadata\n): Promise<void> => {\n  const autoSavePath = fileMetadata.fileIdentifier + '.autosave';\n  return writeAndCheckFile(serializeToJSON(project), autoSavePath).catch(\n    err => {\n      console.error(`Unable to write ${autoSavePath}:`, err);\n      throw err;\n    }\n  );\n};\n\nexport const getWriteErrorMessage = (error: Error): MessageDescriptor =>\n  t`An error occurred when saving the project. Please try again by choosing another location.`;\n\nexport const onRenderNewProjectSaveAsLocationChooser = ({\n  saveAsLocation,\n  setSaveAsLocation,\n  newProjectsDefaultFolder,\n}: {\n  saveAsLocation: ?SaveAsLocation,\n  setSaveAsLocation: (?SaveAsLocation) => void,\n  newProjectsDefaultFolder?: string,\n}) => {\n  const outputPath = saveAsLocation\n    ? path.dirname(saveAsLocation.fileIdentifier)\n    : newProjectsDefaultFolder\n    ? newProjectsDefaultFolder\n    : '';\n  if (!saveAsLocation) {\n    setSaveAsLocation({\n      fileIdentifier: path.join(outputPath, 'game.json'),\n    });\n  }\n\n  return (\n    <LocalFolderPicker\n      fullWidth\n      value={outputPath}\n      onChange={newOutputPath =>\n        setSaveAsLocation({\n          fileIdentifier: path.join(newOutputPath, 'game.json'),\n        })\n      }\n      type=\"create-game\"\n    />\n  );\n};\n","import React from 'react';\nimport SvgIcon from '@material-ui/core/SvgIcon';\n\nexport default React.memo(props => (\n  <SvgIcon {...props} viewBox=\"0 0 16 16\" style={{ fill: 'none' }}>\n    <path\n      d=\"M5.75 11.25C5.75 11.25 6 14.25 4 15.25H12C10 14.25 10.25 11.25 10.25 11.25M5.75 11.25H13.25C14.3546 11.25 15.25 10.3546 15.25 9.25V2.75C15.25 1.64543 14.3546 0.75 13.25 0.75H2.75C1.64543 0.75 0.75 1.64543 0.75 2.75V9.25C0.75 10.3546 1.64543 11.25 2.75 11.25H5.75Z\"\n      stroke=\"currentColor\"\n      strokeWidth=\"1.5\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    />\n  </SvgIcon>\n));\n","// @flow\nimport * as React from 'react';\nimport { t } from '@lingui/macro';\nimport { type StorageProvider } from '../index';\nimport {\n  onOpenWithPicker,\n  onOpen,\n  hasAutoSave,\n  onGetAutoSave,\n} from './LocalProjectOpener';\nimport {\n  onSaveProject,\n  onChooseSaveProjectAsLocation,\n  onSaveProjectAs,\n  onAutoSaveProject,\n  getWriteErrorMessage,\n  onRenderNewProjectSaveAsLocationChooser,\n} from './LocalProjectWriter';\nimport {\n  type AppArguments,\n  POSITIONAL_ARGUMENTS_KEY,\n} from '../../Utils/Window';\nimport { type MessageDescriptor } from '../../Utils/i18n/MessageDescriptor.flow';\nimport Computer from '../../UI/CustomSvgIcons/Computer';\n\n/**\n * Use the Electron APIs to provide access to the native\n * file system (with native save/open dialogs).\n */\nexport default ({\n  internalName: 'LocalFile',\n  name: t`Your computer`,\n  renderIcon: props => <Computer fontSize={props.size} />,\n  getFileMetadataFromAppArguments: (appArguments: AppArguments) => {\n    if (!appArguments[POSITIONAL_ARGUMENTS_KEY]) return null;\n    if (!appArguments[POSITIONAL_ARGUMENTS_KEY].length) return null;\n\n    return {\n      fileIdentifier: appArguments[POSITIONAL_ARGUMENTS_KEY][0],\n    };\n  },\n  onRenderNewProjectSaveAsLocationChooser: onRenderNewProjectSaveAsLocationChooser,\n  createOperations: () => ({\n    onOpenWithPicker,\n    onOpen,\n    hasAutoSave,\n    onSaveProject,\n    onChooseSaveProjectAsLocation,\n    onSaveProjectAs,\n    onAutoSaveProject,\n    onGetAutoSave,\n    getOpenErrorMessage: (error: Error): MessageDescriptor => {\n      return t`Check that the file exists, that this file is a proper game created with GDevelop and that you have the authorization to open it.`;\n    },\n    getWriteErrorMessage,\n  }),\n}: StorageProvider);\n"],"sourceRoot":""}